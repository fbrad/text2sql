[
    {
        "description": "", 
        "title": "10000", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/641175/800950/10000", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 50000 posts that have been viewed more than 10000 times ordered by the number of views descending"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the most viewed 50000 posts that have the number of views higher than 10000, ordered by the count of views"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 50000 posts which have more than 10000 views"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select top 50000 posts that have over 10000 ordered descending"
            }
        ], 
        "sql": "select top 50000 * from posts where posts.ViewCount > 10000 ORDER BY posts.ViewCount desc", 
        "sql_plain": "select top 50000 * from posts where posts.ViewCount > 10000 ORDER BY posts.ViewCount desc", 
        "id": "641175"
    }, 
    {
        "description": "", 
        "title": "sdasdasd", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/288788/375247/sdasdasd", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the average in weeks of the time between the creation date of users and current date"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "calculate the average diference in weeks between creationdate and present for all users"
            }
        ], 
        "sql": "SELECT avg(DATEDIFF(ww,CreationDate, GETDATE())) FROM Users;", 
        "sql_plain": "SELECT avg(DATEDIFF(ww,CreationDate, GETDATE()))\nFROM Users;", 
        "id": "288788"
    }, 
    {
        "description": "ghjghjg", 
        "title": "gfhf", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/387560/497766/gfhf", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts"
            }
        ], 
        "sql": "select * from posts", 
        "sql_plain": "select * from posts", 
        "id": "387560"
    }, 
    {
        "description": "", 
        "title": "GetReplys", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/309053/400308/getreplys", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 20 users with displayname containing 'Marinov'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for users with displayname like Marinov display top 20"
            }
        ], 
        "sql": "SELECT TOP 20 * FROM users WHERE DisplayName LIKE '%Marinov%'", 
        "sql_plain": "SELECT TOP 20 * FROM users WHERE DisplayName LIKE '%Marinov%'", 
        "id": "309053"
    }, 
    {
        "description": "", 
        "title": "MAHHHH", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/383940/493691/mahhhh", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all badges"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all badges"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many baddges are"
            }
        ], 
        "sql": "select * from badges", 
        "sql_plain": "select *\nfrom badges", 
        "id": "383940"
    }, 
    {
        "description": "", 
        "title": "hibernate-orm", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/361869/466548/hibernate-orm", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the comments that have 'hibernate' in the text."
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get all comments with 'hibernate' in the text"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all comments that contains 'hibernate'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show comments that has 'hibernate' in them"
            }
        ], 
        "sql": "select * from Comments where Text='*hibernate*'", 
        "sql_plain": "select * from Comments where Text='*hibernate*'", 
        "id": "361869"
    }, 
    {
        "description": "", 
        "title": "Quit", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/635423/794273/quit", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "select displayname from users where id is greater than 100000"
            }
        ], 
        "sql": "SELECT DisplayName FROM Users WHERE Id<100000", 
        "sql_plain": "SELECT DisplayName FROM Users WHERE Id<100000", 
        "id": "635423"
    }, 
    {
        "description": "", 
        "title": "Kewlness", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/384682/494569/kewlness", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List parent details for posts that have a higher socre than 0"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get posts where score is not 0"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "score and parentid of posts that has score"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "parentid score for posts with score not null"
            }
        ], 
        "sql": "Select score, parentid from posts where score is not null", 
        "sql_plain": "Select score, parentid from posts where score is not null", 
        "id": "384682"
    }, 
    {
        "description": "", 
        "title": "Marr22", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/291565/378712/marr22", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get owneruserid, id of posts that have posttypeid = 2 ordered by owneruserid"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "being ordered by OwnerUserId, show OwnerUserId and id of posts that have PostTypeId 2"
            }
        ], 
        "sql": "select OwnerUserId, Id from Posts where PostTypeId = 2 order by OwnerUserId", 
        "sql_plain": "select OwnerUserId, Id from Posts \nwhere PostTypeId = 2 \norder by OwnerUserId", 
        "id": "291565"
    }, 
    {
        "description": "", 
        "title": "answer", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/297679/386265/answer", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get id, name of posttypes with name = 'answer'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display id and name for all posttypes that have the name 'Answer'"
            }
        ], 
        "sql": "select Id, Name from PostTypes where Name='Answer'", 
        "sql_plain": "select Id, Name from PostTypes where Name='Answer'", 
        "id": "297679"
    }, 
    {
        "description": "", 
        "title": "joe", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/612624/765874/joe", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List id, body of posts that have the same postid as the id of posttags and TagId of PostTags = 17 and Id of posts  < 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id and body for all posts with tagid 17 and id < 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id, body for posts that have tagid = 17 and id less than 1000"
            }
        ], 
        "sql": "select p.Id, p.Body from Posts p inner join PostTags pt on p.Id = pt.PostId where pt.TagId = 17 and p.Id < 1000", 
        "sql_plain": "select p.Id, p.Body\nfrom Posts p\ninner join PostTags pt on p.Id = pt.PostId\nwhere pt.TagId = 17 and p.Id < 1000", 
        "id": "612624"
    }, 
    {
        "description": "", 
        "title": "1.", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/582621/731720/1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "how many users from russi have tags like 'sql' in their posts which were created sfter 2016-01-01"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the number of users that have posts after 2016-01-01 with 'sql'in their tags and live in russia"
            }
        ], 
        "sql": "select count(*) from ( select u.id from users u join posts p on p.owneruserid = u.id where lower(u.location) like '%russia%' and tags like '%sql%' group by u.id having min(p.creationdate)>='2016-01-01' )x;", 
        "sql_plain": "select count(*)\nfrom\n(\nselect\nu.id\nfrom users u\njoin posts p on p.owneruserid = u.id\nwhere lower(u.location) like '%russia%' and tags like '%sql%'\ngroup by u.id\nhaving min(p.creationdate)>='2016-01-01'\n)x;", 
        "id": "582621"
    }, 
    {
        "description": "", 
        "title": "aaaa", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/606933/758401/aaaa", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show row number as #, id as user link and reputation of users from 'bulgar', sorted desc by reputation"
            }
        ], 
        "sql": "SELECT TOP 20 ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation FROM Users WHERE LOWER(Location) LIKE '%bulgar%' ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT TOP 20\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%bulgar%'\n    \nORDER BY\n    Reputation DESC;", 
        "id": "606933"
    }, 
    {
        "description": "", 
        "title": "mine", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/355258/458529/mine", 
        "comments": [
            "Top 30 Ruby Answerers in the last 30 days in London"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 15 names displayed, number of answers and total score of users that are located in London, have a post recent than 30 days and have 'scala' in their pst tag ordered by the descending total number of answers"
            }
        ], 
        "sql": "select top 15 u.displayname, number_of_answers = count(*), total_score = sum(p.score) from users u join posts p on p.owneruserid = u.id join posts pp on p.parentid = pp.id join posttags pt on pt.postid = pp.id join tags t on t.id = pt.tagid where t.tagname like '%scala%' and p.creationdate > (getdate()-30) and u.location like '%London%' group by u.displayname order by 2 desc;", 
        "sql_plain": "-- Top 30 Ruby Answerers in the last 30 days in London\nselect top 15\n  u.displayname,\n  number_of_answers = count(*), \n  total_score = sum(p.score)\nfrom\n  users u\njoin \n  posts p on p.owneruserid = u.id\njoin \n  posts pp on p.parentid = pp.id\njoin \n  posttags pt on pt.postid = pp.id\njoin \n  tags t on t.id = pt.tagid\nwhere \n  t.tagname like '%scala%' \n and \n  p.creationdate > (getdate()-30)\n and \n  u.location like '%London%'\ngroup by \n  u.displayname\norder by \n  2 desc;", 
        "id": "355258"
    }, 
    {
        "description": "", 
        "title": "blablabla", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/288683/375260/blablabla", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 5 posts that have owneruserid = id os users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get top 5 entries from either posts and users"
            }
        ], 
        "sql": "select top(5) * from posts as p join users u on u.id = p.owneruserid", 
        "sql_plain": "select top(5) * from posts as p\njoin users u on u.id = p.owneruserid", 
        "id": "288683"
    }, 
    {
        "description": "", 
        "title": "views_tags_reputation", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/392072/502607/views-tags-reputation", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "list highest reputation posts from 2013"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the best posts from 2013"
            }
        ], 
        "sql": "create table #Total_Tags_Count (postId int, totalTagCount int, numTags int) insert #Total_Tags_Count select Posts.Id, Sum(Tags.Count), Count(*) from Posts inner join PostTags on PostTags.PostId = Posts.Id inner join Tags on Tags.Id = PostTags.TagId where Posts.ParentId is null group by Posts.Id select top 50000 Posts.Id, Posts.Score as postScore, Posts.ViewCount as views, Posts.AnswerCount as answers, Posts.CommentCount as comments, totalTagCount, numTags, Users.Reputation as ownerRep from Posts inner join Users on Users.Id = Posts.OwnerUserId inner join #Total_Tags_Count as ttc on ttc.postId = Posts.Id where Posts.ParentId is null and Posts.CreationDate>='01-01-2013' and Posts.CreationDate<='12-31-2013'", 
        "sql_plain": "create table #Total_Tags_Count (postId int, totalTagCount int, numTags int)\ninsert #Total_Tags_Count\nselect \n     Posts.Id,\n     Sum(Tags.Count), \n     Count(*)\n from Posts\n     inner join PostTags on PostTags.PostId = Posts.Id\n     inner join Tags on Tags.Id = PostTags.TagId    \n where  Posts.ParentId is null\n group by Posts.Id\n\nselect top 50000\n   Posts.Id, \n   Posts.Score as postScore,\n   Posts.ViewCount as views,\n   Posts.AnswerCount as answers,\n   Posts.CommentCount as comments,\n   totalTagCount,\n   numTags,\n   Users.Reputation as ownerRep\n from Posts\n   inner join Users on Users.Id = Posts.OwnerUserId\n   inner join  #Total_Tags_Count as ttc on ttc.postId = Posts.Id\n where  Posts.ParentId is null \n and Posts.CreationDate>='01-01-2013'\n and Posts.CreationDate<='12-31-2013'", 
        "id": "392072"
    }, 
    {
        "description": "", 
        "title": "hh", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/312269/404407/hh", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 50000 posts with viewcount > 1000000 ordered by viewcount"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for posts with mothe than 1000000 ViewCount, show everything for the first 50000, ordered by viewcount"
            }
        ], 
        "sql": "select top 50000 * from posts where posts.ViewCount>1000000 ORDER BY posts.ViewCount", 
        "sql_plain": "select top 50000 * from posts where posts.ViewCount>1000000 ORDER BY \nposts.ViewCount", 
        "id": "312269"
    }, 
    {
        "description": "", 
        "title": "ssdd", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/575086/723520/ssdd", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 10 postid, the number of id of postlinks ordered by the number of id descending"
            }
        ], 
        "sql": "SELECT TOP 10 postid, count(id) FROM PostLinks group by postid ORDER BY count(id) DESC", 
        "sql_plain": "SELECT TOP 10 postid, count(id) FROM PostLinks group by postid ORDER BY count(id) DESC", 
        "id": "575086"
    }, 
    {
        "description": "", 
        "title": "HomeWork3", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/591078/740790/homework3", 
        "comments": [
            "S\u00f8k etter bruker", 
            "S\u00f8ker etter en bruker basert p\u00e5 bruddstykker av navnet"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List DisplayName of Users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show displayname for all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for all users, show theirs displayname"
            }
        ], 
        "sql": "select DisplayName from Users;", 
        "sql_plain": "-- S\u00f8k etter bruker\n-- S\u00f8ker etter en bruker basert p\u00e5 bruddstykker av navnet\n\n\nselect DisplayName from Users;", 
        "id": "591078"
    }, 
    {
        "description": "", 
        "title": "Tagss", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/374862/483003/tagss", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the details for the tag 'java'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all tags that have tagname 'java'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "tags that have tagname java"
            }
        ], 
        "sql": "SELECT * FROM Tags WHERE TagName='java';", 
        "sql_plain": "SELECT * FROM Tags WHERE TagName='java';", 
        "id": "374862"
    }, 
    {
        "description": "", 
        "title": "Res", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/332528/429230/res", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 10000 id and body of posts that have the number of views higher that 10000"
            }
        ], 
        "sql": "select top 10000 Posts.id, Posts.body from posts where posts.ViewCount>10000", 
        "sql_plain": "select top 10000 Posts.id, Posts.body from posts where posts.ViewCount>10000", 
        "id": "332528"
    }, 
    {
        "description": "", 
        "title": "cracow_users", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/616704/770692/cracow-users", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "id as [User Link] and reputation for users from 'cracow' or 'krakow' sorted resc by reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for users from 'cracow' or 'krakox' get id as [User link] and reputation and sort them by reputation descending"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation FROM Users WHERE (LOWER(Location) LIKE '%cracow%' OR UPPER(Location) LIKE '%CRACOW%' or Location like '%Cracow%' or LOWER(Location) LIKE '%krakow%' OR UPPER(Location) LIKE '%KRAKOW%' or Location like '%Krakow%') ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    (LOWER(Location) LIKE '%cracow%'\n    OR UPPER(Location) LIKE '%CRACOW%'\n    or Location like '%Cracow%'\n    or LOWER(Location) LIKE '%krakow%'\n    OR UPPER(Location) LIKE '%KRAKOW%'\n    or Location like '%Krakow%')\nORDER BY\n    Reputation DESC;", 
        "id": "616704"
    }, 
    {
        "description": "", 
        "title": "user", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/569160/717085/user", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the difference in days between LastAccessDate of users and the current date, id of users"
            }
        ], 
        "sql": "select datediff(day,LastAccessDate,getdate()),Id from Users", 
        "sql_plain": "select datediff(day,LastAccessDate,getdate()),Id from Users", 
        "id": "569160"
    }, 
    {
        "description": "", 
        "title": "Test", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/639044/798566/test", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id and reputation of users that are located in 'Malaysia' and have a reputation greater than 1000 ordered by descending reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select id as user link and reputation from users where location like Malaysia and reputation over 1000 ordered by reputation descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "selelct the ids of all users that live in malaysia and their reputation is over 1000, descending by reputation"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation FROM Users WHERE LOWER(Location) LIKE '%Malaysia%' OR UPPER(Location) LIKE '%Malaysia%' or Location like '%Malaysia%' AND Reputation >= 1000 ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%Malaysia%'\n    OR UPPER(Location) LIKE '%Malaysia%'\n    or Location like '%Malaysia%'\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;", 
        "id": "639044"
    }, 
    {
        "description": "", 
        "title": "mockable-android", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/626477/782377/mockable-android", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 10 post feedbacks for post with id 54136791344"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select top 10 posts feedback where post id is 54136791344"
            }
        ], 
        "sql": "select top 10 * from PostFeedback where PostId=54136791344", 
        "sql_plain": "select top 10 *\nfrom PostFeedback\nwhere PostId=54136791344", 
        "id": "626477"
    }, 
    {
        "description": "", 
        "title": "video", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/317064/410609/video", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the post type id of posts that have id > 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show posttypeid for posts with id > 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "list all posttypeid for posts that have id greater than 1"
            }
        ], 
        "sql": "select PostTypeID from Posts Where Id >1", 
        "sql_plain": "select PostTypeID from Posts Where Id >1", 
        "id": "317064"
    }, 
    {
        "description": "", 
        "title": "new2", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/588593/738053/new2", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 2 posts with body containing 'sarcastic'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 2 posts about sarcastic"
            }
        ], 
        "sql": "SELECT TOP 2 * FROM Posts WHERE Body LIKE '%sarcastic%'", 
        "sql_plain": "SELECT TOP 2 * FROM Posts WHERE Body LIKE '%sarcastic%'", 
        "id": "588593"
    }, 
    {
        "description": "", 
        "title": "Ashwin-test-Upvotes(col8)-tenure", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/574504/722830/ashwin-test-upvotescol8-tenure", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get creationdate, the current date, the difference between current date and creation date of users with id = 2173917"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show creationdate, currentdate and the sifference between those two for user 2173917"
            }
        ], 
        "sql": "select creationdate, getdate(), getdate()-creationdate from users where id = 2173917 ;", 
        "sql_plain": "select creationdate, getdate(), getdate()-creationdate\nfrom users\nwhere id = 2173917\n;", 
        "id": "574504"
    }, 
    {
        "description": "", 
        "title": "Title", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/597590/748275/title", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show the age, views of all users that have more than 100 views"
            }
        ], 
        "sql": "SELECT age, views from users where views >100", 
        "sql_plain": "SELECT age, views from users where views >100", 
        "id": "597590"
    }, 
    {
        "description": "", 
        "title": "ertdfgcvb", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/301747/391196/ertdfgcvb", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "get displayname, reputation, location of users with 'Hungary' in location, ordered by descending reputation"
            }
        ], 
        "sql": "SELECT u.DisplayName'Display Name', u.Reputation'Rep', u.Location'Location' FROM Users u WHERE u.Location LIKE '%Hungary%' ORDER BY 'Rep' DESC", 
        "sql_plain": "SELECT u.DisplayName'Display Name', u.Reputation'Rep', u.Location'Location'\nFROM Users u\nWHERE u.Location LIKE '%Hungary%'\nORDER BY 'Rep' DESC", 
        "id": "301747"
    }, 
    {
        "description": "", 
        "title": "Top10", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/338381/436736/top10", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 10 posts ordered by descending number of views"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 10 posts ordered by viewcount descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "list everything on top 10 posts and sort the result descending on viewcount"
            }
        ], 
        "sql": "Select top 10 * from Posts Order By ViewCount Desc", 
        "sql_plain": "Select top 10 *\nfrom Posts\nOrder By ViewCount Desc", 
        "id": "338381"
    }, 
    {
        "description": "", 
        "title": "xcvxcv", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/371771/479029/xcvxcv", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the score and view count for all posts"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the score and the number of views for each post"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show score and viewcount for all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for all posts, display their score and viewcount"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "score and viewcount for posts"
            }
        ], 
        "sql": "SELECT Score as Posts, ViewCount from Posts m;", 
        "sql_plain": "SELECT Score as Posts, ViewCount from Posts m;", 
        "id": "371771"
    }, 
    {
        "description": "", 
        "title": "SFDC", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/367738/473911/sfdc", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the id's and the scores for all posts"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the score and id for each post"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id and score of all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the id and dthe score of posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "from posts get id and score"
            }
        ], 
        "sql": "select Id, score from Posts", 
        "sql_plain": "select Id, score from Posts", 
        "id": "367738"
    }, 
    {
        "description": "", 
        "title": "Productivity", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/638342/797779/productivity", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the parent id and the number of posts that have the post type id =2 and the length of the body less or equal than 200 and the word 'scrum' in the body, only if the number of posts is greater than 1"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List all the parent id's and the number of posts if it is higher than 1 for posts that have the body length less or equal to 200 and contain 'scrum'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show parentidd and the number of ids of posts that have posttypeid = 2, len of body less than 200, body like scrum with more than 1 id orderdd descending by count of id"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select the parent id and the number of posts where posttypeid is 2 and the length of body is less than 200 and have the body like scrum, grouped by parentid, having more than 1 id, ordered by the number of ids descending"
            }
        ], 
        "sql": "select ParentId as [Post Link], count(id) from posts where posttypeid = 2 and len(body) <= 200 and (body like '%scrum%') group by parentid having count(id) > 1 order by count(id) desc;", 
        "sql_plain": "select\n   ParentId as [Post Link],\n   count(id)\nfrom posts\nwhere posttypeid = 2 and len(body) <= 200\n  and (body like '%scrum%')\ngroup by parentid\nhaving count(id) > 1\norder by count(id) desc;", 
        "id": "638342"
    }, 
    {
        "description": "", 
        "title": "Boulder", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/607498/759178/boulder", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 100 users with reputation > 100 and 'Colorado' in Location and 'z' in DisplayName"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get top 100 users with reputation > 100, from 'Colorado' and have a 'z' in their display name"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "100 users from 'Colorado', with reputation greater than 100 and with a 'z' in their displayname"
            }
        ], 
        "sql": "SELECT TOP 100 * FROM users WHERE 1=1 AND reputation > 100 AND Location LIKE '%Colorado' AND displayname like '%z%'", 
        "sql_plain": "SELECT TOP 100 *\nFROM users\nWHERE 1=1\n  AND reputation > 100\n  AND Location LIKE '%Colorado'\n  AND displayname like '%z%'", 
        "id": "607498"
    }, 
    {
        "description": "", 
        "title": "join", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/626968/783001/join", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "select displayname, is, location reputation, number of useridd from users and badges where reputation is >= 550000 grouped by displayname, id, location, reputation ordered by reputation desc"
            }
        ], 
        "sql": "SELECT DisplayName, a.Id, Location, Reputation, count(b.userid) as BadgesCount From Users a, badges b where a.id=b.userid and Reputation>=550000 group by DisplayName, a.Id, Location, Reputation order by reputation desc", 
        "sql_plain": "SELECT DisplayName, a.Id, Location, Reputation, count(b.userid) as BadgesCount From Users a, badges b where\na.id=b.userid and Reputation>=550000 group by DisplayName, a.Id, Location, Reputation order by reputation desc", 
        "id": "626968"
    }, 
    {
        "description": "", 
        "title": "asdfs", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/603816/755109/asdfs", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get different top 1000 title, body of posts that have id = postid of posttags and id - tagid of tags and tagname of tags = 'php' or 'javascript' or 'jquery'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 1000 distinct posts , but only title and body , that have 'php' or 'javascript' or 'jquery' in their tagname"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get the boddy and title of top 1000 posts that have either 'php', 'javascipt' or 'jquery' in their tagname"
            }
        ], 
        "sql": "select distinct top 1000 title, body from posts p inner join posttags pt on pt.postid = p.id inner join tags t on pt.tagid = t.id where t.tagname in ('php', 'javascript','jquery')", 
        "sql_plain": "select distinct top 1000 title, body\nfrom posts p\ninner join posttags pt on pt.postid = p.id\ninner join tags t on pt.tagid = t.id\nwhere t.tagname in ('php', 'javascript','jquery')", 
        "id": "603816"
    }, 
    {
        "description": "", 
        "title": "Abstained", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/336392/434382/abstained", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 100 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 100 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for the top 100 users list everything"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all the informations for the top 100 users"
            }
        ], 
        "sql": "SELECT TOP 100 * FROM Users", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nSELECT TOP 100 * FROM Users", 
        "id": "336392"
    }, 
    {
        "description": "", 
        "title": "tag_facts", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/589022/738567/tag-facts", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the difference in weeks between CreationDate of posts and the current date"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many weeks ago were all posts created"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show how many weeks have passed since every post was create"
            }
        ], 
        "sql": "select DATEDIFF(week, p.CreationDate, getdate()) from posts p", 
        "sql_plain": "select DATEDIFF(week, p.CreationDate, getdate())\nfrom posts p", 
        "id": "589022"
    }, 
    {
        "description": "", 
        "title": "ANSWERS_uids", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/348833/449945/answers-uids", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id, post type id, creation date, score and owner user id of posts have the post type id equal to 2, have been created between '01/01/2015' and '06/30/2015' and have owner user id one of the values (3010968,187606,187690,189205)"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, posttypeid, creationdate, score and owneruserid for those posts that were created between '01/01/2015' and '06/30/2015', have posttypeid 2 and owneruserid in list 3010968,187606,187690,189205"
            }
        ], 
        "sql": "select id, posttypeid, creationdate, score, owneruserid from posts where creationdate >= '01/01/2015' and creationdate <= '06/30/2015' and posttypeid=2 and owneruserid in (3010968,187606,187690,189205)", 
        "sql_plain": "select id, posttypeid, creationdate, score, owneruserid\nfrom posts\nwhere creationdate >= '01/01/2015'\nand creationdate <= '06/30/2015'\nand posttypeid=2\nand owneruserid in \n(3010968,187606,187690,189205)", 
        "id": "348833"
    }, 
    {
        "description": "", 
        "title": "Ashwin-test-answers(col2)", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/574483/722778/ashwin-test-answerscol2", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with owneruserid = 2173917 and PostTypeId = 2 that have been created more recent than '2015-01-01'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all informations about those posts that have owneruserid 2173917, posttype 2 and are created after > 2015-01-01"
            }
        ], 
        "sql": "select * from posts where owneruserid = 2173917 and PostTypeId=2 and creationdate > '2015-01-01';", 
        "sql_plain": "select * \nfrom posts \nwhere owneruserid = 2173917\nand PostTypeId=2\nand creationdate > '2015-01-01';", 
        "id": "574483"
    }, 
    {
        "description": "", 
        "title": "Search", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/611602/764392/search", 
        "comments": [
            "Search", 
            "Test query"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with 'Django' in the Title"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "posts that contains 'Django'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all posts about 'Django'"
            }
        ], 
        "sql": "SELECT * FROM Posts WHERE Title LIKE '%Django%';", 
        "sql_plain": "-- Search\n-- Test query\n\nSELECT * FROM Posts WHERE Title LIKE '%Django%';", 
        "id": "611602"
    }, 
    {
        "description": "", 
        "title": "C#", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/620788/775647/c", 
        "comments": [
            "DISTINCT"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 50000 favoriteCount, Tagname,Count of posts that have the same id as postid of PostTags and Tags contain 'c#'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "favoritecount, tagname and count for top 50000 posts with tag 'c#'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for posts with tag 'c#' get favoritecount, tagname and count"
            }
        ], 
        "sql": "SELECT TOP 50000 Posts.FavoriteCount, Tags.TagName, Tags.Count FROM Posts JOIN PostTags ON PostTags.PostId = Posts.Id JOIN Tags ON Tags.Id = PostTags.TagId WHERE Posts.Tags LIKE '%c#%' ;", 
        "sql_plain": "SELECT \n  --DISTINCT \n  TOP 50000 \n  Posts.FavoriteCount, Tags.TagName, Tags.Count FROM Posts \n  JOIN PostTags ON PostTags.PostId = Posts.Id \n  JOIN Tags ON Tags.Id = PostTags.TagId \n  WHERE Posts.Tags LIKE '%c#%'\n;", 
        "id": "620788"
    }, 
    {
        "description": "", 
        "title": "TESTS", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/340038/438827/tests", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the posts with a score higher than 150 ordered by score"
            }
        ], 
        "sql": "SELECT * FROM POSTS WHERE SCORE > 150 ORDER BY Score;", 
        "sql_plain": "SELECT * FROM POSTS WHERE SCORE > 150 \nORDER BY Score;", 
        "id": "340038"
    }, 
    {
        "description": "", 
        "title": "Coding-Dojo", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/606943/758418/coding-dojo", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get    Id,   AccountId,   DisplayName,   Reputation,   WebsiteUrl,   Location of usersthat have id equal to one of the values in (6628959, 6690644, 6678804, 6700305, 6700283, 6609213) ordered by descending reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "Id, AccountId, DisplayName, Reputation, WebsiteUrl, Location for users 6628959, 6690644, 6678804, 6700305, 6700283, 6609213 by reputation desc"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "fror either user with id 6628959, 6690644, 6678804, 6700305, 6700283, 6609213 get Id, AccountId, DisplayName, Reputation, WebsiteUrl, Location and sort them descendding by reputation"
            }
        ], 
        "sql": "SELECT Id, AccountId, DisplayName, Reputation, WebsiteUrl, Location FROM Users WHERE Id in (6628959, 6690644, 6678804, 6700305, 6700283, 6609213) ORDER BY reputation DESC", 
        "sql_plain": "SELECT \n   Id,\n   AccountId,\n   DisplayName,\n   Reputation,\n   WebsiteUrl,\n   Location\nFROM\n   Users \nWHERE\n Id in (6628959, 6690644, 6678804, 6700305, 6700283, 6609213)\nORDER BY\n   reputation DESC", 
        "id": "606943"
    }, 
    {
        "description": "", 
        "title": "query_time", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/346072/446675/query-time", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the total number of posts. List the total number of posts that don't have any answers."
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of posts. Also get the total number of posts that have the answer count equal to 0."
            }, 
            {
                "annotator_id": 2, 
                "annotation": "count the number of posts and also the number of posts that weren't answered"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many posts are there, and how many doesn't have an answer"
            }
        ], 
        "sql": "select count(*) from posts; select count(*) from posts where AnswerCount=0;", 
        "sql_plain": "select count(*) from posts;\nselect count(*) from posts where AnswerCount=0;", 
        "id": "346072"
    }, 
    {
        "description": "", 
        "title": "Poop", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/294367/382285/poop", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all postfeedback"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display all the informations about PostFeedback"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all from PostFeedback"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all from PostFeedback"
            }
        ], 
        "sql": "SELECT * FROM PostFeedback", 
        "sql_plain": "SELECT *\nFROM PostFeedback", 
        "id": "294367"
    }, 
    {
        "description": "", 
        "title": "giphy", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/332926/429749/giphy", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the id of posts as Post Link for all posts that have 'http://giphy.com/gifs/%/fullscreen' in the body and the creation date higher than '1 jan 2015'"
            }
        ], 
        "sql": "select Id as [Post Link] from posts where Body like '%http://giphy.com/gifs/%/fullscreen%' and CreationDate >= '1 jan 2015'", 
        "sql_plain": "select Id as [Post Link]\nfrom posts\nwhere Body like '%http://giphy.com/gifs/%/fullscreen%'\n  and CreationDate >= '1 jan 2015'", 
        "id": "332926"
    }, 
    {
        "description": "", 
        "title": "Problem?", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/349531/450728/problem", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the first 100 titles of posts with titles that start with 'Problem' or 'problem', ordered by the lenght of the title"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 100 titles of posts that have 'problem' at the begining of their title, sorted by the length of the title"
            }
        ], 
        "sql": "SELECT TOP 100 Title FROM Posts WHERE Title LIKE 'Problem%' OR Title LIKE 'problem%' ORDER BY LEN(Title)", 
        "sql_plain": "SELECT TOP 100 Title FROM Posts WHERE Title LIKE 'Problem%' OR Title LIKE 'problem%' ORDER BY LEN(Title)", 
        "id": "349531"
    }, 
    {
        "description": "", 
        "title": "sfsfd", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/387090/497239/sfsfd", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List 50000000000 users ordered by newest user id"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List the newest 50000000000 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 50000000000 users, but only id and displayname"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id and display name of top 50000000000 users"
            }
        ], 
        "sql": "select top 50000000000 id, displayname from users order by NEWID()", 
        "sql_plain": "select top 50000000000 id, displayname \nfrom users\norder by NEWID()", 
        "id": "387090"
    }, 
    {
        "description": "", 
        "title": "HelloWorld", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/386002/495983/helloworld", 
        "comments": [
            "This was just to get the ID of the tag i wanted."
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with the tag 'c'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show tags with tagname = c"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "tags with tagname = c"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "tags with tagname 'c'"
            }
        ], 
        "sql": "SELECT * FROM TAGS WHERE TagName = 'c'", 
        "sql_plain": "--This was just to get the ID of the tag i wanted.\nSELECT * \nFROM TAGS \nWHERE TagName = 'c'", 
        "id": "386002"
    }, 
    {
        "description": "", 
        "title": "GA", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/638610/798088/ga", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show all reasons for review rejection"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all review rejection reasons"
            }
        ], 
        "sql": "select * from ReviewRejectionReasons;", 
        "sql_plain": "select * from ReviewRejectionReasons;", 
        "id": "638610"
    }, 
    {
        "description": "", 
        "title": "mr_123", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/393705/504658/mr-123", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all posts"
            }
        ], 
        "sql": "SELECT * FROM Posts", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nSELECT *\nFROM Posts", 
        "id": "393705"
    }, 
    {
        "description": "", 
        "title": "bla", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/576210/724671/bla", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of posts with id = 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the number of all posts that have id 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many posts ahve id 1"
            }
        ], 
        "sql": "select count(*) from posts where id = 1;", 
        "sql_plain": "select count(*) from posts where id = 1;", 
        "id": "576210"
    }, 
    {
        "description": "", 
        "title": "tsql", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/327970/423808/tsql", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the id and score of posts for id = 4 or id = 6"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id and score for posts that have idd between 4 and 6"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for posts with id between 4 and 6 show id and score"
            }
        ], 
        "sql": "select Id, Score from Posts where ID in (4,6)", 
        "sql_plain": "select Id, Score from Posts where ID in (4,6)", 
        "id": "327970"
    }, 
    {
        "description": "", 
        "title": "Cranky", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/327471/423125/cranky", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all posts feedback for id = 4109"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all PostFeedback for id 4109"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for id 4109, get all about PostFeedback"
            }
        ], 
        "sql": "select * from PostFeedback where Id=4109;", 
        "sql_plain": "select * from PostFeedback where Id=4109;", 
        "id": "327471"
    }, 
    {
        "description": "", 
        "title": "total_users", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/352922/455464/total-users", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many users are"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get the total number of users"
            }
        ], 
        "sql": "Select Count(*) From Users", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nSelect Count(*) From Users", 
        "id": "352922"
    }, 
    {
        "description": "", 
        "title": "PythonStars", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/362797/467621/pythonstars", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of posts that have the 'python' tag"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the number of posts which have a tag 'python'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get top 1 posts that has as tag 'python'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get 1 post that has tags like 'python'"
            }
        ], 
        "sql": "select count(1) from posts where Tags = 'python';", 
        "sql_plain": "select count(1) from posts\nwhere Tags = 'python';", 
        "id": "362797"
    }, 
    {
        "description": "", 
        "title": "VoteTypes", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/341668/440805/votetypes", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display all users"
            }
        ], 
        "sql": "Select * from Users", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nSelect * from Users", 
        "id": "341668"
    }, 
    {
        "description": "", 
        "title": "2011-2013\u8d85\u8fc7200\u8bcd\u7684\u4eba\u95ee\u7684\u95ee\u9898\u6570", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/383238/492905/2011-2013200", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "all users with displaymane = 'Alex A.'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users with the name 'Alex A.'"
            }
        ], 
        "sql": "select count(id) from posts where owneruserid in (select owneruserid from (select owneruserid, count(posts.id) as postNum from posts where CreationDate > '2010-12-31' and CreationDate < '2014-01-01' group by owneruserid )as newt where newt.postNum > 200 ) and PostTypeId=1 and CreationDate > '2010-12-31' and CreationDate < '2014-01-01'", 
        "sql_plain": "select count(id) from posts where owneruserid in (select owneruserid from \n(select owneruserid, count(posts.id)  \nas postNum from posts where  CreationDate > '2010-12-31' and  CreationDate < '2014-01-01' group by owneruserid )as newt where newt.postNum > 200 \n) and PostTypeId=1 and  CreationDate > '2010-12-31' and  CreationDate < '2014-01-01'", 
        "id": "383238"
    }, 
    {
        "description": "", 
        "title": "users1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/574122/722389/users1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "for all users that have the displayname starting with Wiktor St show all informatons"
            }
        ], 
        "sql": "select * from users where displayName like 'Wiktor St%'", 
        "sql_plain": "select * from users where displayName like 'Wiktor St%'", 
        "id": "574122"
    }, 
    {
        "description": "", 
        "title": "Tags", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/610321/762698/tags", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get id, TagName, Count of tags for Count > 1000 ordered by descending Count"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, tagname, cpunt for all tags that have count > 1000 sorted desc by count"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id, tagname, count for all tags that have more than 1000 count ordedred by count descending"
            }
        ], 
        "sql": "select Id, TagName, Count from Tags where Count > 1000 order by Count desc;", 
        "sql_plain": "select Id, TagName, Count from Tags where Count > 1000 order by Count desc;", 
        "id": "610321"
    }, 
    {
        "description": "", 
        "title": "serverless", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/628852/785321/serverless", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the number of posts that have tags containing 'serverless'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of posts that have tags like severless"
            }
        ], 
        "sql": "select count(*) from posts where tags like '%serverless%'", 
        "sql_plain": "select count(*) from posts where tags like '%serverless%'", 
        "id": "628852"
    }, 
    {
        "description": "", 
        "title": "Arturs", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/360314/464682/arturs", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all users named 'artur'"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List all users with the display name 'artur'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users that are called 'artur'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "from users, get all that has 'artur in their name'"
            }
        ], 
        "sql": "Select * From Users WHERE LOWER(DisplayName) LIKE '%artur%'", 
        "sql_plain": "Select * From Users WHERE LOWER(DisplayName) LIKE '%artur%'", 
        "id": "360314"
    }, 
    {
        "description": "", 
        "title": "country00", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/632611/790570/country00", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the users with the Location in Canada and reputation higher or equal to 1000, oredered by descending reputation"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List all users that have a reputation higher than 1000 and are located in Canada ordered by reputation descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all users users from canada that have reputatin over 1000 ordered by reputation descnding"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all users from canada with reputation >= 1000 orderedd desc by reputation"
            }
        ], 
        "sql": "SELECT* FROM Users WHERE LOWER(Location) LIKE 'Canada' AND Reputation >= 1000 ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT*\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE 'Canada'\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;", 
        "id": "632611"
    }, 
    {
        "description": "", 
        "title": "Iran", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/364273/469482/iran", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Select all users from Iran that have a reputation higher than 2700"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List all the users from Iran with a reputation of over 2700"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users from iran that has reputation over 2700"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "list all users from iran with reputation > 2700"
            }
        ], 
        "sql": "Select * from Users where Location like '%Iran%' and Reputation > 2700", 
        "sql_plain": "Select * from Users where Location like '%Iran%' and Reputation > 2700", 
        "id": "364273"
    }, 
    {
        "description": "", 
        "title": "Testing", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/624128/779596/testing", 
        "comments": [
            "count occurrences of two tags"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List different id's , tags, and creation date of posts for tags containing 'image-procesing'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select ddistinct id, tags, creationdate where tags contains image-processing"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "different id, tags, creationdate of posts with taks like image-processing"
            }
        ], 
        "sql": "SELECT DISTINCT Id, Tags, CreationDate FROM Posts WHERE Tags LIKE '%image-processing%'", 
        "sql_plain": "-- count occurrences of two tags\nSELECT DISTINCT Id, Tags, CreationDate\nFROM Posts\nWHERE Tags LIKE '%image-processing%'", 
        "id": "624128"
    }, 
    {
        "description": "", 
        "title": "sda", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/326911/422462/sda", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 100 owner displayed name, creation date of posts ordered by the most recent creation date"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get OwnerDisplayName, CreationDate of top 100 posts, orderedd by creationdadte"
            }
        ], 
        "sql": "SELECT TOP 100 OwnerDisplayName, CreationDate FROM [Posts] ORDER BY CreationDate ASC", 
        "sql_plain": "SELECT TOP 100 OwnerDisplayName, CreationDate FROM [Posts] ORDER BY CreationDate ASC", 
        "id": "326911"
    }, 
    {
        "description": "", 
        "title": "Qry_Test", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/346467/447172/qry-test", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description", 
            "SELECT TOP 1", 
            "FROM Users"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the first post that has the type id equal to 2"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get the top post that have posttypeid 2"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all information for the first post that have posttypeid 2"
            }
        ], 
        "sql": "SELECT TOP 1 * FROM Posts WHERE PostTypeID = 2", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\n-- SELECT TOP 1 \n-- FROM Users\n\n\n\n\n\n\n\n\n\n\nSELECT TOP 1 * \nFROM Posts\nWHERE PostTypeID = 2", 
        "id": "346467"
    }, 
    {
        "description": "", 
        "title": "posts_tags_reputation", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/383044/492683/posts-tags-reputation", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List 20 highest reputation posts"
            }
        ], 
        "sql": "SELECT TOP 20 Posts.Id, Users.Reputation, Tags.Count, Posts.ViewCount FROM Posts INNER JOIN Users ON Users.Id = Posts.OwnerUserId INNER JOIN PostTags ON PostTags.PostId = Posts.ParentId INNER JOIN Tags ON Tags.Id = PostTags.PostId", 
        "sql_plain": "SELECT TOP 20\n    Posts.Id,\n    Users.Reputation,\n    Tags.Count,\n    Posts.ViewCount \nFROM Posts\n    INNER JOIN Users ON Users.Id = Posts.OwnerUserId\n    INNER JOIN PostTags ON PostTags.PostId = Posts.ParentId\n    INNER JOIN Tags ON Tags.Id = PostTags.PostId", 
        "id": "383044"
    }, 
    {
        "description": "", 
        "title": "scala", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/607476/759133/scala", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "number of posts with tagid= 1589 and posttypeid = 1"
            }
        ], 
        "sql": "SELECT Count(*) AS QuestionCount FROM Posts p JOIN PostTags t on p.Id = t.TagId WHERE t.TagId = 1589 AND p.PostTypeId = 1", 
        "sql_plain": "SELECT \n    Count(*) AS QuestionCount\nFROM \n    Posts p\nJOIN PostTags t on p.Id = t.TagId\nWHERE \n    t.TagId = 1589\n    AND p.PostTypeId = 1", 
        "id": "607476"
    }, 
    {
        "description": "", 
        "title": "2762884", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/589467/739050/2762884", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all omments with userid = 2762884 ordered by descending creationdate"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all informations for those comments that are created by user 2762884 ordered descending by creationdate"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for those comments owned by user 2762884 sorted descending by creationdate"
            }
        ], 
        "sql": "select * from comments where userid = 2762884 order by creationdate desc", 
        "sql_plain": "select * from comments where userid = 2762884 order by creationdate desc", 
        "id": "589467"
    }, 
    {
        "description": "", 
        "title": "Github", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/620467/775272/github", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get id, emailhash,aboutme of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, emailhash and about me for all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for all users get id, emailhash and aboutme"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id, emailhash, aboutme all users"
            }
        ], 
        "sql": "Select id, EmailHash, AboutMe from Users", 
        "sql_plain": "Select id, EmailHash, AboutMe\nfrom Users", 
        "id": "620467"
    }, 
    {
        "description": "", 
        "title": "asasas", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/342146/441460/asasas", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 10 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get top 10 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show first top 10 users"
            }
        ], 
        "sql": "select top 10 * from users", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nselect top 10 * from users", 
        "id": "342146"
    }, 
    {
        "description": "", 
        "title": "rolflPlay", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/164167/385101/rolflplay", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all votes,posts with owneruserid of post = 507 and creationdate of vote = '27 Jan 2011' and postId of vote = id of post"
            }
        ], 
        "sql": "Select * from Votes v, Posts p where p.OwnerUserId = 507 and '27 Jan 2011' = Convert(Date, v.CreationDate) and v.PostId = p.Id", 
        "sql_plain": "Select *\nfrom Votes v, Posts p\nwhere p.OwnerUserId = 507\n  and '27 Jan 2011' = Convert(Date, v.CreationDate)\n  and v.PostId = p.Id", 
        "id": "164167"
    }, 
    {
        "description": "", 
        "title": "Quotes", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/377865/486633/quotes", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the title and body of posts which have 'CJam' in the body"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get title and body of posts if 'CJam' is in the body"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "title, body of posts with body 'CJam' order by score"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show title and body from posts thata have 'CJam' in body, order score asc"
            }
        ], 
        "sql": "SELECT Title, Body FROM Posts WHERE Body LIKE '%CJam%' ORDER BY Score", 
        "sql_plain": "SELECT Title, Body\nFROM Posts\nWHERE Body LIKE '%CJam%'\nORDER BY Score", 
        "id": "377865"
    }, 
    {
        "description": "", 
        "title": "Len>200", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/622626/777905/len200", 
        "comments": [
            "Posts containing a very short body", 
            "Posts containing a body that is less than 8 chars long"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get id as 'Post link',body,score of posts with length of the body higher than 200"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "body and score for posts less than 200"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "posts longer than 200 show body and score"
            }
        ], 
        "sql": "select Id as [Post Link], Body, Score from Posts where Len(Body) > 200", 
        "sql_plain": "-- Posts containing a very short body\n-- Posts containing a body that is less than 8 chars long\n\nselect Id as [Post Link], Body, Score from Posts where Len(Body) > 200", 
        "id": "622626"
    }, 
    {
        "description": "", 
        "title": "ID", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/616094/770034/id", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with id = 184618"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts for user 184618"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all posts for user with id 184618"
            }
        ], 
        "sql": "select * from Posts as p where p.id=184618;", 
        "sql_plain": "select * from Posts as p where p.id=184618;", 
        "id": "616094"
    }, 
    {
        "description": "", 
        "title": "top-users-jaipur", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/592568/742433/top-users-jaipur", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show numberedd the id and reputation of users from india that have reputation greater than 1530, sorted descening by reputation"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation FROM Users WHERE LOWER(Location) LIKE '%india%' AND Reputation >= 1530 ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%india%'\n    AND Reputation >= 1530\nORDER BY\n    Reputation DESC;", 
        "id": "592568"
    }, 
    {
        "description": "", 
        "title": "all", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/344742/445184/all", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get everything about posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "list all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show informations for all posts"
            }
        ], 
        "sql": "select * from posts;", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nselect * from posts;", 
        "id": "344742"
    }, 
    {
        "description": "", 
        "title": "Pareto", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/631120/788577/pareto", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many users are"
            }
        ], 
        "sql": "select COUNT(*) from Users", 
        "sql_plain": "select COUNT(*) from Users", 
        "id": "631120"
    }, 
    {
        "description": "", 
        "title": "Askers", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/312581/404773/askers", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 100 sum of score as 'totalscore', sum of score * 1000 / number of id as 'AvgScore',owner user id as 'UserName' and the total number of posts ordered by the descending totalscore"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display the sum of score, sum of score multiplied by 1000 and dividedd by the number of ids, owneruserid and the number of ids of posts an sort them descending by the sum of their score"
            }
        ], 
        "sql": "SELECT TOP 100 sum(Score) as TotalScore, sum(Score)*1000/count(Id) as AvgScore, OwnerUserId as UserName, count(Id) as NumPosts FROM Posts group by OwnerUserId order by sum(Score) DESC;", 
        "sql_plain": "SELECT TOP 100 \n       sum(Score) as TotalScore,\n       sum(Score)*1000/count(Id) as AvgScore,\n       OwnerUserId as UserName,\n       count(Id) as NumPosts\nFROM Posts\ngroup by OwnerUserId\norder by sum(Score) DESC;", 
        "id": "312581"
    }, 
    {
        "description": "", 
        "title": "VHDL", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/380475/489626/vhdl", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the score, title,body and body of accepted answer of the top 50 posts that have 'VHDL' in title"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get top 50 posts and accepted answers related to 'VHDL'"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List 50 highest scores posts and accepted answers with 'VHDL' in the title"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 50 posts that are accepted and their title contains 'VHDL', ordered ascending by score"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the scre, title and body of top 50 posts thata are accepted as answers, their body contains VHDL and are ordered by score asc"
            }
        ], 
        "sql": "SELECT TOP 50 p1.Score, p1.Title, p1.Body, p2.Body FROM [Posts] p1 JOIN [Posts] p2 ON (p1.AcceptedAnswerId = p2.Id) WHERE p1.Title LIKE '%VHDL%' ORDER BY p1.Score ASC;", 
        "sql_plain": "SELECT TOP 50 p1.Score, p1.Title, p1.Body, p2.Body\nFROM [Posts] p1\nJOIN [Posts] p2\nON (p1.AcceptedAnswerId = p2.Id)\nWHERE p1.Title LIKE '%VHDL%'\nORDER BY p1.Score ASC;", 
        "id": "380475"
    }, 
    {
        "description": "", 
        "title": "name", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/612841/766133/name", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all users which have displayName = 'CodeJack'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all users with ddisplayname 'CodeJack'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "users that have 'CodedJack' as displayname"
            }
        ], 
        "sql": "select * from Users where DisplayName = 'CodeJack'", 
        "sql_plain": "select * from Users where DisplayName = 'CodeJack'", 
        "id": "612841"
    }, 
    {
        "description": "", 
        "title": "asdsd", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/582316/731424/asdsd", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 10 Posts with owneruserid = 2357543"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 10 posts owned by user 2357543"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "which are top 10 posts of user 2357543"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for user 2357543 get first 10 posts"
            }
        ], 
        "sql": "SELECT top 10 * FROM Posts where owneruserid=2357543", 
        "sql_plain": "SELECT top 10 * FROM Posts\nwhere owneruserid=2357543", 
        "id": "582316"
    }, 
    {
        "description": "", 
        "title": "abc", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/639779/799410/abc", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of posts with total views between 15000 and 20000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many posts have their views between 15000 and 20000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select the number of posts that have their viewcount between 15000 and 20000"
            }
        ], 
        "sql": "select count(*) from posts where posts.ViewCount>15000 and posts.ViewCount<20000", 
        "sql_plain": "select count(*) from posts where posts.ViewCount>15000 and \nposts.ViewCount<20000", 
        "id": "639779"
    }, 
    {
        "description": "", 
        "title": "dbs_5", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/288840/375459/dbs-5", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the displayname of users that have te id the same as owneruser of posts"
            }
        ], 
        "sql": "SELECT DisplayName FROM Users LEFT JOIN Posts ON Users.Id=Posts.OwnerUserId", 
        "sql_plain": "SELECT DisplayName FROM Users LEFT JOIN Posts ON Users.Id=Posts.OwnerUserId", 
        "id": "288840"
    }, 
    {
        "description": "", 
        "title": "TEST", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/639299/798832/test", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List title from posts if the title contains 'Magento' else add 'Magento' in front of the title"
            }
        ], 
        "sql": "select CASE WHEN (Title NOT LIKE '%magento%') THEN ('Magento ' + Title) ELSE Title END AS Title from posts where title !='';", 
        "sql_plain": "select CASE WHEN (Title NOT LIKE '%magento%') THEN ('Magento ' + Title) ELSE Title END AS Title from posts where title !='';", 
        "id": "639299"
    }, 
    {
        "description": "", 
        "title": "PowerBI", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/336127/434048/powerbi", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all posts that have 'powerbi' in the tag"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts that have 'powerbi' as tags"
            }
        ], 
        "sql": "select * from Posts where Tags like '%powerbi%';", 
        "sql_plain": "select * from Posts where Tags like '%powerbi%';", 
        "id": "336127"
    }, 
    {
        "description": "", 
        "title": "accepted", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/597056/747690/accepted", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show tagname and the number of tags with that name for posts thata have taks like '<sql>' and were created between '2014-11-01' and '2014-12-01', ordered descending by desc"
            }
        ], 
        "sql": "Select tagname, count(*) c from posts p join posttags pt on pt.postid = p.id join tags t on pt.tagid= t.id Where tags like '<sql>' and p.creationdate >= '2014-11-01' and p.creationdate <= '2014-12-01' group by tagname order by c desc", 
        "sql_plain": "Select tagname, count(*) c \nfrom posts p \njoin posttags pt on pt.postid = p.id \njoin tags t on pt.tagid= t.id \nWhere tags like '<sql>' and p.creationdate >= '2014-11-01' and p.creationdate <= '2014-12-01'\ngroup by tagname \norder by c desc", 
        "id": "597056"
    }, 
    {
        "description": "", 
        "title": "C_Lang", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/299806/388786/c-lang", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the tags of pots that have the tags = 'sockets'"
            }
        ], 
        "sql": "SELECT Tags FROM Posts WHERE Tags = 'sockets'", 
        "sql_plain": "SELECT Tags FROM Posts WHERE Tags = 'sockets'", 
        "id": "299806"
    }, 
    {
        "description": "", 
        "title": "peta_users", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/613350/766774/peta-users", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show id as User Link and reputation of users from 'kuala lumpur' ordered descending by reputation"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation FROM Users WHERE (LOWER(Location) LIKE '%kuala lumpur%' OR UPPER(Location) LIKE '%KUALA LUMPUR%' or Location like '%Kuala Lumpur%' or LOWER(Location) LIKE '%kl%' OR UPPER(Location) LIKE '%KL%') AND Reputation >= 500 ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    (LOWER(Location) LIKE '%kuala lumpur%'\n    OR UPPER(Location) LIKE '%KUALA LUMPUR%'\n    or Location like '%Kuala Lumpur%'\n    or LOWER(Location) LIKE '%kl%'\n    OR UPPER(Location) LIKE '%KL%')\n    AND Reputation >= 500\nORDER BY\n    Reputation DESC;", 
        "id": "613350"
    }, 
    {
        "description": "", 
        "title": "qaaaa", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/341368/440421/qaaaa", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 50 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 50 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get everything about the first 50 posts"
            }
        ], 
        "sql": "select top 50 * from Posts", 
        "sql_plain": "select top 50 * from Posts", 
        "id": "341368"
    }, 
    {
        "description": "", 
        "title": "hadoop-query", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/353242/455807/hadoop-query", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the total number of posts and the owner user id of posts that have the score higher than 1000 grouped by the owner user id of the post"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the total number of posts and the owneruserid for those posts with score higher than 100"
            }
        ], 
        "sql": "select count(*),owneruserid from posts where score > 1000 group by owneruserid", 
        "sql_plain": "select count(*),owneruserid from posts where score > 1000 group by owneruserid", 
        "id": "353242"
    }, 
    {
        "description": "", 
        "title": "t", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/639504/799092/t", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the total number of tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select the number of column in Tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many rows are in Tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many tags are there?"
            }
        ], 
        "sql": "select count(*) from Tags", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nselect count(*) from Tags", 
        "id": "639504"
    }, 
    {
        "description": "", 
        "title": "harik_test", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/314557/407249/harik-test", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 100 titles,tags,bounty amount, creation date of posts that have the same id as the post id of votes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display top 100 title, tags, BountyAmount and creationdate for posts"
            }
        ], 
        "sql": "select top 100 p.Title, p.Tags, v.BountyAmount, v.CreationDate from posts p inner join votes v on p.id = v.postid;", 
        "sql_plain": "select top 100  p.Title, p.Tags, v.BountyAmount, v.CreationDate from posts p inner join votes v on p.id = v.postid;", 
        "id": "314557"
    }, 
    {
        "description": "", 
        "title": "resr", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/382002/491346/resr", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display all users"
            }
        ], 
        "sql": "select * from users", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nselect * from users", 
        "id": "382002"
    }, 
    {
        "description": "", 
        "title": "rfr", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/594581/744629/rfr", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get different PostID,TagName of PostTags and Tags which have TagId of PostTags = Id of Tags and PostID in the top 50 PostId of PostTags for TagName = 'r' or 'python'"
            }
        ], 
        "sql": "select Distinct PostId, TagName from PostTags pt , tags t where pt.TagId = t.ID and PostId IN (Select top 50 PostId from PostTags pt inner join tags t on pt.TagId = t.ID where t.TagName In ('r', 'python'))", 
        "sql_plain": "select Distinct PostId, TagName\nfrom PostTags pt , tags t \nwhere pt.TagId = t.ID\nand PostId IN (Select top 50 PostId\nfrom PostTags pt inner join tags t on pt.TagId = t.ID\nwhere t.TagName In ('r', 'python'))", 
        "id": "594581"
    }, 
    {
        "description": "", 
        "title": "isabelle", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/630279/787386/isabelle", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all tags that have the tag name 'isabelle'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all tags where nametag is 'isabelle'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "tags with name isabelle"
            }
        ], 
        "sql": "select * from Tags where TagName = 'isabelle'", 
        "sql_plain": "select * from Tags where TagName = 'isabelle'", 
        "id": "630279"
    }, 
    {
        "description": "", 
        "title": "ggg", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/641100/800862/ggg", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all users that are from 'yerevan' and have the displayed name 'babi' ordered by descending reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all users in Yerevan where their name is Babl ordered descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users from Yerevan that have their display name Babl"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all Balb users from Yerevan"
            }
        ], 
        "sql": "SELECT * FROM Users WHERE LOWER(Location) LIKE LOWER('%Yerevan%') AND DisplayName = 'Babl' ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT\n*\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE LOWER('%Yerevan%') AND DisplayName = 'Babl'\nORDER BY\n    Reputation DESC;", 
        "id": "641100"
    }, 
    {
        "description": "", 
        "title": "stackoverflow", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/383114/492642/stackoverflow", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List title, body and tags from posts that don't have an empty title"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get posts with a title"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List all posts that have a title"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the id, body, title and tags of top 5000 posts that has title"
            }
        ], 
        "sql": "select top 5000 Id, body, title, tags from posts tablesample(50000 ROWS) where title <> ''", 
        "sql_plain": "select top 5000 Id, body, title, tags from posts  tablesample(50000 ROWS) where title <> ''", 
        "id": "383114"
    }, 
    {
        "description": "", 
        "title": "\u83b7\u53d6\u5e26Java\u6807\u7b7e\u7684\u88ab\u6536\u85cf\u6700\u591a\u7684\u4e3b\u9898\uff08\u524d200\uff09", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/582344/731448/java200", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the first 200 id as 'Post Link',body,FavoriteCount,score,creationdate,tags of Posts for tags containing '<android>' ordered by FavouriteCount descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get id, body, favoritecount, score, creationdate and tags for those posts with tags like '<android>', sorted descending by favoritecount"
            }
        ], 
        "sql": "select top 200 id as [Post Link],body,FavoriteCount,score,creationdate,tags from Posts where tags like '%<android>%' order by FavoriteCount desc", 
        "sql_plain": "select top 200  id as [Post Link],body,FavoriteCount,score,creationdate,tags\nfrom Posts\nwhere tags like '%<android>%'\norder by FavoriteCount desc", 
        "id": "582344"
    }, 
    {
        "description": "", 
        "title": "Tagnames", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/326422/421825/tagnames", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all the different tags of posts, ordered by tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show unique tags that are in posts and order them by tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display distinct tags of posts and sort thenascending bt tags"
            }
        ], 
        "sql": "select distinct(tags) from Posts order by tags", 
        "sql_plain": "select distinct(tags) from Posts\norder by tags", 
        "id": "326422"
    }, 
    {
        "description": "", 
        "title": "LuisMendoPosts", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/579117/727842/luismendoposts", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the total number of posts created by OwnerUserId=3052665"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many posts were written by user 3052665"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the number of posts owne by user 3052665"
            }
        ], 
        "sql": "SELECT Count(*) FROM Posts WHERE OwnerUserId=3052665;", 
        "sql_plain": "SELECT Count(*) FROM Posts WHERE OwnerUserId=3052665;", 
        "id": "579117"
    }, 
    {
        "description": "", 
        "title": "hi", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/610589/763135/hi", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with id < 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts that have their id under 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all posts with id < 1000"
            }
        ], 
        "sql": "SELECT * FROM Posts WHERE Id < 1000", 
        "sql_plain": "SELECT * FROM Posts WHERE Id < 1000", 
        "id": "610589"
    }, 
    {
        "description": "", 
        "title": "COMMENTCOUNT", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/351574/454625/commentcount", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 100 id's, score, viewcount and commentcount of posts that have the post type id equal to 2"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, score, viewcount and commentcout of top 100 entries from posts that have posttypeid 2"
            }
        ], 
        "sql": "select top 100 id, score, viewcount, commentcount from posts where posttypeid = 2;", 
        "sql_plain": "select top 100 id, score, viewcount, commentcount from posts\nwhere posttypeid = 2;", 
        "id": "351574"
    }, 
    {
        "description": "", 
        "title": "investigate", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/635175/793929/investigate", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all posts with post type = 3"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all from posts where post type id is 2"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts that have posttypeid 2"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts that have posttypeid equal to 2"
            }
        ], 
        "sql": "select * from posts where posttypeid=3;", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nselect * from posts where posttypeid=3;", 
        "id": "635175"
    }, 
    {
        "description": "", 
        "title": "viewcount", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/638487/797927/viewcount", 
        "comments": [
            "ORDER BY posts.ViewCount"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of posts that were viewed more than 60000 times"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the number of posts with the view count greater than 60000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select the number of posts that have their view count greater than 60000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many posts have more than 60000 views"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of posts with more than 60000 views"
            }
        ], 
        "sql": "select count(*) from posts where posts.ViewCount > 60000", 
        "sql_plain": "select count(*) from posts where posts.ViewCount > 60000 \n\n--ORDER BY posts.ViewCount", 
        "id": "638487"
    }, 
    {
        "description": "", 
        "title": "tablecreation", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/310580/402468/tablecreation", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all the badges that start with the letter 'A'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all badges that starts with 'A'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all badges that have 'A' as their first letter"
            }
        ], 
        "sql": "select * from badges where name like ('A%')", 
        "sql_plain": "select * from badges\nwhere  name like ('A%')", 
        "id": "310580"
    }, 
    {
        "description": "", 
        "title": "viewcount_score_ownerRep_tagCount", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/383147/492732/viewcount-score-ownerrep-tagcount", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the first 50000 users based on score, reputation and tag count"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List the top 50000 users with scores, reputation and number of tags"
            }
        ], 
        "sql": "create table #views_ownerRep (PostId int, ViewCount int, Score int, OwnerRep int) insert #views_ownerRep select Posts.Id, Posts.ViewCount, Posts.Score, Users.Reputation from Posts INNER JOIN Users ON Users.Id = Posts.OwnerUserId select top 50000 Score, OwnerRep, Tags.Count as TagCount, TagName from #views_ownerRep vpr INNER JOIN PostTags ON PostTags.PostId = vpr.PostId INNER JOIN Tags ON Tags.Id = PostTags.TagId where ViewCount>0", 
        "sql_plain": "create table #views_ownerRep (PostId int, ViewCount int, Score int, OwnerRep int)\ninsert #views_ownerRep\n\nselect\nPosts.Id, Posts.ViewCount, Posts.Score, Users.Reputation \nfrom Posts\n    INNER JOIN Users ON Users.Id = Posts.OwnerUserId\n\nselect top 50000\nScore, OwnerRep, Tags.Count as TagCount, TagName\nfrom #views_ownerRep vpr\n    INNER JOIN PostTags ON PostTags.PostId = vpr.PostId\n    INNER JOIN Tags ON Tags.Id = PostTags.TagId\nwhere ViewCount>0", 
        "id": "383147"
    }, 
    {
        "description": "", 
        "title": "Node.js", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/618288/772591/node-js", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get different id, reputation, displayName, WebsiteUrl, AboutMe, Views of users with the same id as Id of comments and location containing 'rancisco' and text of comment containing 'Node.js'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all distinct id, reputation, displayname, websiteurl, aboutme and views of users from 'francisco' who commented about 'Node.js'"
            }
        ], 
        "sql": "select distinct u.Id , Reputation, DisplayName, WebsiteUrl, AboutMe, Views from Users u inner join Comments c on c.UserId = u.Id where u.Location like '%rancisco%' and c.Text like '%Node.js%'", 
        "sql_plain": "select  distinct u.Id , Reputation, DisplayName, WebsiteUrl, AboutMe, Views from Users u inner join Comments c on c.UserId = u.Id where u.Location like '%rancisco%' and c.Text like '%Node.js%'", 
        "id": "618288"
    }, 
    {
        "description": "", 
        "title": "amoeba", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/622310/777513/amoeba", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 10000 Id,   DisplayName,   Reputation,   WebsiteUrl,   Location,   CreationDate,   LastAccessDate,   AboutMe,   Views,   UpVotes,   DownVotes,   ProfileImageUrl,   EmailHash,   Age,   AccountId of users that have 'Kenya' in location"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "Id, DisplayName, Reputation, WebsiteUrl, Location, CreationDate, LastAccessDate, AboutMe, Views, UpVotes, DownVotes, ProfileImageUrl, EmailHash, Age, AccountId fron all users from Kenya"
            }
        ], 
        "sql": "SELECT TOP 10000 Id, DisplayName, Reputation, WebsiteUrl, Location, CreationDate, LastAccessDate, AboutMe, Views, UpVotes, DownVotes, ProfileImageUrl, EmailHash, Age, AccountId FROM Users WHERE Location like N'%Kenya%'", 
        "sql_plain": "SELECT TOP 10000\n   Id,\n   DisplayName,\n   Reputation,\n   WebsiteUrl,\n   Location,\n   CreationDate,\n   LastAccessDate,\n   AboutMe,\n   Views,\n   UpVotes,\n   DownVotes,\n   ProfileImageUrl,\n   EmailHash,\n   Age,\n   AccountId\nFROM\n   Users\nWHERE\n   Location like N'%Kenya%'", 
        "id": "622310"
    }, 
    {
        "description": "", 
        "title": "Cowsay", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/592536/742398/cowsay", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 50 posts with 'javascript' in the tag"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 50 posts that have tags like 'javascript'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 50 posts that that have 'javascript' as tag"
            }
        ], 
        "sql": "SELECT TOP 50 * FROM Posts WHERE Tags LIKE '%javascript%' ;", 
        "sql_plain": "SELECT TOP 50 * \nFROM Posts\nWHERE Tags LIKE '%javascript%'\n;", 
        "id": "592536"
    }, 
    {
        "description": "", 
        "title": "demographics", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/331702/428251/demographics", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of locations , location of users, grouped by the Location and ordered by the number of locations descending"
            }
        ], 
        "sql": "SELECT COUNT(Location), Location FROM Users GROUP BY Location ORDER BY COUNT(Location) DESC;", 
        "sql_plain": "SELECT COUNT(Location), Location FROM Users GROUP BY Location ORDER BY COUNT(Location) DESC;", 
        "id": "331702"
    }, 
    {
        "description": "", 
        "title": "ytyt", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/325231/420463/ytyt", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the id of vote types"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all ids from votetypes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all ids for votetypes"
            }
        ], 
        "sql": "SELECT id FROM votetypes", 
        "sql_plain": "SELECT id\nFROM votetypes", 
        "id": "325231"
    }, 
    {
        "description": "", 
        "title": "bbb1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/321717/416100/bbb1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the vote types that have id < 10"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for idd less than 10, get all from votetypes"
            }
        ], 
        "sql": "select * from votetypes where id <10", 
        "sql_plain": "select * from votetypes where id <10", 
        "id": "321717"
    }, 
    {
        "description": "", 
        "title": "UpVotesPerView", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/338622/436991/upvotesperview", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 10 scores of posts multiplied by 1.0 and divided by view count as 'Ratio' and the title of posts ordered by Ratio"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 10 posts, but only display score divided by viewcount as ratio, title and posts, ordered by ratio"
            }
        ], 
        "sql": "select top 10 Score*1.0/ViewCount as Ratio, Title from Posts order by Score*1.0/ViewCount desc", 
        "sql_plain": "select top 10 Score*1.0/ViewCount as Ratio, Title\nfrom Posts\norder by Score*1.0/ViewCount desc", 
        "id": "338622"
    }, 
    {
        "description": "", 
        "title": "Practice1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/633698/791952/practice1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts that have the score between 10 and 20"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all posts with score between 10 and 20"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all posts0here score between 10 and 20"
            }
        ], 
        "sql": "select * from posts Where score between 10 and 20", 
        "sql_plain": "select *\nfrom posts\nWhere score between 10 and 20", 
        "id": "633698"
    }, 
    {
        "description": "", 
        "title": "first_10", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/287262/373796/first-10", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 10 creationdate of users ordered by creationdate"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show first 10 created users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "which were the first 10 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "name the first 10 users based on creationdate"
            }
        ], 
        "sql": "SELECT TOP 10 CreationDate FROM Users ORDER BY CreationDate ASC", 
        "sql_plain": "SELECT TOP 10 CreationDate FROM Users\n  ORDER BY CreationDate ASC", 
        "id": "287262"
    }, 
    {
        "description": "", 
        "title": "xuan_test", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/573284/721453/xuan-test", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 20 posts with ,android. in the tag and posttypeid = 1 ordered by descending score"
            }
        ], 
        "sql": "SELECT TOP 20 * FROM Posts WHERE Tags like '%<android>%' AND PostTypeId=1 ORDER BY Score Desc", 
        "sql_plain": "SELECT TOP 20 * \n    FROM Posts \n    WHERE Tags like '%<android>%' AND PostTypeId=1\n    ORDER BY Score Desc", 
        "id": "573284"
    }, 
    {
        "description": "", 
        "title": "c", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/334200/431649/c", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id and tags of posts that have the type equal to 1 and 'c#<' in the tag and the id smaller than 28922954"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, tags of those posts that have posttypeid 1 and tags like 'c#>' and their id is less than 28922954"
            }
        ], 
        "sql": "select id,tags from posts where posttypeid = 1 and Tags like '%c#>%' and id < 28922954", 
        "sql_plain": "select id,tags from posts\nwhere posttypeid = 1 and Tags like '%c#>%' and id < 28922954", 
        "id": "334200"
    }, 
    {
        "description": "", 
        "title": "isreal", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/604389/755708/isreal", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get different Id, Reputation, DisplayName, WebsiteUrl,AboutMe,EmailHash,Views of Users with id = UserID of comments and Location containing 'israel'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show disctict id, reputation, displayname, websiteurl, aboutme, email, hash and views for users from 'israel'"
            }
        ], 
        "sql": "select distinct u.Id , Reputation, DisplayName, WebsiteUrl, AboutMe, EmailHash, Views from Users u inner join Comments c on c.UserId = u.Id where u.Location like '%israel%'", 
        "sql_plain": "select distinct u.Id , Reputation, DisplayName, WebsiteUrl, AboutMe, EmailHash, Views from Users u inner join Comments c on c.UserId = u.Id where u.Location like '%israel%'", 
        "id": "604389"
    }, 
    {
        "description": "", 
        "title": "Cordova", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/634138/792560/cordova", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the number of posts that have the id of the tag 1589 and the post type is 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select number of posts that are poststags there tagid = 1589 and posttypeid = 1"
            }
        ], 
        "sql": "SELECT Count(*) AS QuestionCount FROM Posts p JOIN PostTags t on p.Id = t.TagId WHERE t.TagId = 1589 AND p.PostTypeId = 1", 
        "sql_plain": "SELECT \n    Count(*) AS QuestionCount\nFROM \n    Posts p\nJOIN PostTags t on p.Id = t.TagId\nWHERE \n    t.TagId = 1589\n    AND p.PostTypeId = 1", 
        "id": "634138"
    }, 
    {
        "description": "", 
        "title": "guido", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/291564/378707/guido", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of users with more than 10 upvotes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many user have more than 10 upvotes"
            }
        ], 
        "sql": "select count(*) from users where (UpVotes > 10);", 
        "sql_plain": "select count(*) from users where (UpVotes > 10);", 
        "id": "291564"
    }, 
    {
        "description": "", 
        "title": "SaltQ", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/289095/375713/saltq", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List id of posts that have tags = 'salt-stack'"
            }
        ], 
        "sql": "SELECT Id FROM Posts WHERE tags ='salt-stack'", 
        "sql_plain": "SELECT\n  Id\n FROM Posts\n WHERE tags ='salt-stack'", 
        "id": "289095"
    }, 
    {
        "description": "", 
        "title": "oouu", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/294759/382728/oouu", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get age, sum of upVotes of users that have age between 30 and 33"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for users between 30 and 33 show age and the total of their upvotes"
            }
        ], 
        "sql": "Select Age, Sum(UpVotes) From Users Where Age between 30 and 33 group by Age", 
        "sql_plain": "Select \n  Age, Sum(UpVotes)\nFrom\n  Users\n  \nWhere\n  Age between 30 and 33\n\ngroup by\n  Age", 
        "id": "294759"
    }, 
    {
        "description": "", 
        "title": "Python", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/584227/733411/python", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get id, tags of posts with 'python' not in the tags and owneruserid = 1663352"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id and tag for all posts owned by user 1663352 and do not contains 'python'"
            }
        ], 
        "sql": "SELECT Id, Tags FROM Posts WHERE Posts.Tags NOT LIKE '%python%' AND Posts.OwnerUserId = 1663352", 
        "sql_plain": "SELECT Id, Tags FROM Posts WHERE Posts.Tags NOT LIKE '%python%' AND Posts.OwnerUserId = 1663352", 
        "id": "584227"
    }, 
    {
        "description": "", 
        "title": "Ashwin-test-Upvotes(col10)-views", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/574499/722815/ashwin-test-upvotescol10-views", 
        "comments": [
            "and creationdate > '2015-01-11'", 
            "and creationdate <= '2015-01-18';"
        ], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "how many viewcount have those posts that are owned by user 2173917, have posttypeid 2 and were created in between '2015-01-05' and '2015-01-11'"
            }
        ], 
        "sql": "select sum(viewcount) from posts where id in ( select parentid from posts where owneruserid = 2173917 and PostTypeId=2 and creationdate > '2015-01-05' and creationdate <= '2015-01-11');", 
        "sql_plain": "select sum(viewcount)\nfrom posts \nwhere id in \n(\nselect parentid \nfrom posts \nwhere owneruserid = 2173917\nand PostTypeId=2\nand creationdate > '2015-01-05'\nand creationdate <= '2015-01-11');\n--and creationdate > '2015-01-11'\n--and creationdate <= '2015-01-18';", 
        "id": "574499"
    }, 
    {
        "description": "", 
        "title": "Age", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/617970/772236/age", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get reputation of users grouped by reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show users's reputation grouped and ordered by reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "users's reputation grouped by reputation and ordered by reputation"
            }
        ], 
        "sql": "SELECT Reputation FROM Users GROUP BY Reputation ORDER BY Reputation", 
        "sql_plain": "SELECT Reputation  FROM Users GROUP BY Reputation ORDER BY Reputation", 
        "id": "617970"
    }, 
    {
        "description": "", 
        "title": "sadsadsa", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/606948/758428/sadsadsa", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description", 
            "SELECT * FROM Tags WHERE TagName = 'java';", 
            "SELECT pt.PostId FROM PostTags pt WHERE TagId = 17;"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all comments with PostId one of the PostID of PostTags with tagid = 17"
            }
        ], 
        "sql": "SELECT * FROM Comments WHERE PostId IN ( SELECT pt.PostId FROM PostTags pt WHERE TagId = 17 );", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n-- SELECT * FROM Tags WHERE TagName = 'java';\n-- SELECT pt.PostId FROM PostTags pt WHERE TagId = 17;\n\nSELECT * FROM Comments WHERE PostId IN (\n  SELECT pt.PostId FROM PostTags pt WHERE TagId = 17\n  );", 
        "id": "606948"
    }, 
    {
        "description": "", 
        "title": "kiev_users", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/569144/717069/kiev-users", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show, numbered, the id andddd reputation of all users from kiev that have their reputation over 1000 are sort them descending by reputation"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation FROM Users WHERE (LOWER(Location) LIKE '%kiev%' OR UPPER(Location) LIKE '%KIEV%' or Location like '%Kiev%' or LOWER(Location) LIKE '%kiev%' OR UPPER(Location) LIKE '%KIEV%' or Location like '%Kiev%') AND Reputation >= 1000 ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    (LOWER(Location) LIKE '%kiev%'\n    OR UPPER(Location) LIKE '%KIEV%'\n    or Location like '%Kiev%'\n    or LOWER(Location) LIKE '%kiev%'\n    OR UPPER(Location) LIKE '%KIEV%'\n    or Location like '%Kiev%')\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;", 
        "id": "569144"
    }, 
    {
        "description": "", 
        "title": "prova1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/588353/737805/prova1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 100 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 100 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all informations for first 100 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for top 100 posts, get all informations"
            }
        ], 
        "sql": "SELECT TOP 100 * FROM Posts", 
        "sql_plain": "SELECT TOP 100 * FROM Posts", 
        "id": "588353"
    }, 
    {
        "description": "", 
        "title": "awefs", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/357973/461773/awefs", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id and the parent id of all posts ordered by id"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "from posts, get id and parentid, order by id"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, parentid of posts ordered by id"
            }
        ], 
        "sql": "select id,parentid from posts order by id asc;", 
        "sql_plain": "select id,parentid from posts order by id asc;", 
        "id": "357973"
    }, 
    {
        "description": "", 
        "title": "users", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/640053/799692/users", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the displayed name, id, location and reputation of all users ordered by descending reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select displayname, id, location and reputation from users ordered by reputation descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show displayname, id, location, reputation of all users sorted by reputation desc"
            }
        ], 
        "sql": "SELECT DisplayName, Id, Location, Reputation FROM Users order by reputation desc", 
        "sql_plain": "SELECT DisplayName, Id, Location, Reputation FROM Users order by reputation desc", 
        "id": "640053"
    }, 
    {
        "description": "", 
        "title": "age", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/631026/788461/age", 
        "comments": [
            "SELECT Age, SUM() AS count_per_age FROM Users GROUP BY Age;"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the age and total of age of all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many users are of every age"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number or users of every age"
            }
        ], 
        "sql": "SELECT Age, COUNT(Age) AS count_per_age FROM Users GROUP BY Age;", 
        "sql_plain": "/*SELECT Age, \n\tSUM() AS count_per_age\nFROM Users\nGROUP BY Age; */\n\nSELECT Age, \nCOUNT(Age) AS count_per_age\nFROM Users\nGROUP BY Age;", 
        "id": "631026"
    }, 
    {
        "description": "", 
        "title": "person", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/297675/386265/person", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the first 10 id and name of posttypes"
            }
        ], 
        "sql": "select Top 10 Id, Name from PostTypes", 
        "sql_plain": "select Top 10 Id, Name from PostTypes", 
        "id": "297675"
    }, 
    {
        "description": "", 
        "title": "site", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/630714/788007/site", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all comments with 'brazilianldsjag.com' in the text"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get all the comments that have the text containing 'brazilianldsjag.com'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all coments that contains brazilianldsjag.com"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "comments with brazilianldsjag.com"
            }
        ], 
        "sql": "select * from comments where text like '%brazilianldsjag.com%'", 
        "sql_plain": "select * from comments where text like '%brazilianldsjag.com%'", 
        "id": "630714"
    }, 
    {
        "description": "", 
        "title": "stackOverflow", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/633640/791900/stackoverflow", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the score of all posts"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List the score from each post"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select score from posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all scores for posts"
            }
        ], 
        "sql": "SELECT Score FROM Posts", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nSELECT Score FROM Posts", 
        "id": "633640"
    }, 
    {
        "description": "", 
        "title": "trying", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/329783/425980/trying", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all users with the display name containing 'Bhargav'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get everything for users that have 'Bhargav' in their displayname"
            }
        ], 
        "sql": "select * from Users where displayname like '%Bhargav%'", 
        "sql_plain": "select * from Users where displayname like '%Bhargav%'", 
        "id": "329783"
    }, 
    {
        "description": "", 
        "title": "Teste", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/621884/777042/teste", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get top 10 votes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 20 votes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "votes top 10"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 10 votes"
            }
        ], 
        "sql": "select top 10 * from Votes", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nselect top 10 * from Votes", 
        "id": "621884"
    }, 
    {
        "description": "Tells the number of users on StackOverflow", 
        "title": "user-stats", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/381795/491061/user-stats", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the total number of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many users are"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of users"
            }
        ], 
        "sql": "SELECT COUNT(*) FROM Users;", 
        "sql_plain": "SELECT COUNT(*) FROM Users;", 
        "id": "381795"
    }, 
    {
        "description": "", 
        "title": "123", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/640202/799878/123", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "get number of users that have been created since 2016-12-16"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the number of users created more recent than 2016-12-16"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select the number of rows of Users that have their creation date before 2016-12-16"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many users were registered before 2016-12-16"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many users were created before 2016-12-16"
            }
        ], 
        "sql": "Select Count(*) From Users where CreationDate <= Convert(datetime, '2016-12-16' )", 
        "sql_plain": "Select Count(*) From Users where CreationDate <= Convert(datetime, '2016-12-16' )", 
        "id": "640202"
    }, 
    {
        "description": "", 
        "title": "query_test", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/354155/457066/query-test", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts that have the title starting with 'How'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts that have title starts with 'How'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all informations for those posts that have 'How' at the start of their title"
            }
        ], 
        "sql": "SELECT * FROM posts WHERE Title LIKE 'How%';", 
        "sql_plain": "SELECT * FROM posts WHERE Title LIKE 'How%';", 
        "id": "354155"
    }, 
    {
        "description": "", 
        "title": "Try", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/298564/387255/try", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id as 'post link' of posts with body starting with 'Try this'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for all bodies of posts that starts with 'Try this' show the id"
            }
        ], 
        "sql": "SELECT Id AS [Post Link] FROM Posts WHERE Body LIKE 'Try this%'", 
        "sql_plain": "SELECT Id AS [Post Link] FROM Posts WHERE Body LIKE 'Try this%'", 
        "id": "298564"
    }, 
    {
        "description": "", 
        "title": "Yayyyy", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/320367/414452/yayyyy", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the post id as 'post link', id as 'suggested edit links' of suggested edits"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show postid and id for all suggestededits"
            }
        ], 
        "sql": "select [PostId] as [Post Link], s.Id as [Suggested Edit Link] from SuggestedEdits s", 
        "sql_plain": "select [PostId] as [Post Link], s.Id as [Suggested Edit Link]\nfrom SuggestedEdits s", 
        "id": "320367"
    }, 
    {
        "description": "", 
        "title": "JEST", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/584204/733423/jest", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get title, id, score, viewcount of posts with title containing 'jest'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "title, id, score and viewcount for posts that have 'jest' in their title"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for posts with title like jest display title, id, score, viewcount"
            }
        ], 
        "sql": "SELECT Title, Id, Score, ViewCount FROM Posts WHERE Title like '%jest%'", 
        "sql_plain": "SELECT Title, Id, Score, ViewCount FROM Posts WHERE Title like '%jest%'", 
        "id": "584204"
    }, 
    {
        "description": "", 
        "title": "vote\u3057\u305f\u4eba\u304c\u5206\u304b\u308b\u306e\u304b\u30c6\u30b9\u30c8", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/367884/474185/vote", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 20 votes that don't have a null user and the vote type is not 5 or 8"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the top 20 votes by not null users and with the vote type not 5 or 8"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 20 votes that doesnt have userid null, and VoteTypeId NOT IN (5, 8)"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "from votes, get top 20 that have a userid and votetypeid not between 5 and 8"
            }
        ], 
        "sql": "select top 20 * from Votes where UserId is not null and VoteTypeId NOT IN (5, 8)", 
        "sql_plain": "select top 20 *\nfrom Votes\nwhere UserId is not null\nand VoteTypeId NOT IN (5, 8)", 
        "id": "367884"
    }, 
    {
        "description": "", 
        "title": "people", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/633833/792102/people", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all users that have a reputation greater than 10000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all users where reputation is greater than 10000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "SELECT all FROM UsersWHERE reputation > 10000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "users with reputation > 10000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "users that have reputation more than 10000"
            }
        ], 
        "sql": "SELECT * FROM Users WHERE reputation > 10000;", 
        "sql_plain": "SELECT * FROM Users\nWHERE reputation > 10000;", 
        "id": "633833"
    }, 
    {
        "description": "", 
        "title": "\u627f\u8a8d\u6e08\u307f\u56de\u7b54\u306e\u3042\u308b\u8cea\u554f\u306e\u4ef6\u6570", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/345832/446412/", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of posts that have a valid accepted answer id."
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List the total number of posts that have an accepted answer that is not null."
            }
        ], 
        "sql": "select count(*) from Posts where AcceptedAnswerId is not null", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nselect count(*) from Posts where AcceptedAnswerId is not null", 
        "id": "345832"
    }, 
    {
        "description": "", 
        "title": "PPeopleQ", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/592398/742245/ppeopleq", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all users with location containing 'hyderabad' and 'java' in About Me, ordered by descending reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all informations about those users that live in 'hyderabad' and jave 'java' in their description, ordered descending by reputation"
            }
        ], 
        "sql": "SELECT us.* FROM Users us WHERE lower(location) like '%hyderabad%' AND lower(AboutMe) like '%java%' ORDER BY Reputation desc;", 
        "sql_plain": "SELECT us.*\n\tFROM Users us\n\tWHERE lower(location) like '%hyderabad%'\n\tAND lower(AboutMe) like '%java%'\n\tORDER BY Reputation desc;", 
        "id": "592398"
    }, 
    {
        "description": "", 
        "title": "Score", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/293577/381229/score", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the displayname, creatiodate of users. List the number of displayname of users"
            }
        ], 
        "sql": "select displayname, creationdate from users select count(displayname) from users", 
        "sql_plain": "select displayname, creationdate from users\nselect count(displayname) from users", 
        "id": "293577"
    }, 
    {
        "description": "", 
        "title": "ffff", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/341948/441216/ffff", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 11 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "list first 11 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 11 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "list all you can get about top 11 users"
            }
        ], 
        "sql": "select top 11 * from users", 
        "sql_plain": "select top 11  * from users", 
        "id": "341948"
    }, 
    {
        "description": "", 
        "title": "Helmar-query", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/589892/739495/helmar-query", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get average score of posts with posttypeid = 2 and owneruserid = 184706"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show average score those posts owned by user 184706 and that have posttypeid 2"
            }
        ], 
        "sql": "select avg(score) from posts where posttypeid=2 and owneruserid=184706", 
        "sql_plain": "select avg(score) from posts where posttypeid=2 and owneruserid=184706", 
        "id": "589892"
    }, 
    {
        "description": "", 
        "title": "NOW", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/341629/440751/now", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the first creation date of posts ordered by creation date"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the date of the first posts ever created"
            }
        ], 
        "sql": "DECLARE @NOW DateTime Set @NOW = ( SELECT top 1 cast(Posts.CreationDate as date) AS Date FROM Posts ORDER BY Posts.CreationDate ); SELECT @NOW;", 
        "sql_plain": "DECLARE @NOW DateTime\n\nSet @NOW = (\n    SELECT top 1 cast(Posts.CreationDate as date) AS Date\n    FROM Posts ORDER BY Posts.CreationDate\n);\n\nSELECT @NOW;", 
        "id": "341629"
    }, 
    {
        "description": "", 
        "title": "deletions", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/361472/466072/deletions", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of weeks since a post has been deleted and the number of deleted posts"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the number of deleted posts and the number of weeks since they have been deleted"
            }
        ], 
        "sql": "select datediff(w, deletiondate, getdate()) as [deletion] , count(*) as [delete count] from postswithdeleted where deletiondate is not null group by datediff(w, deletiondate, getdate()) order by 1", 
        "sql_plain": "select datediff(w, deletiondate, getdate()) as [deletion]\n, count(*) as [delete count]\nfrom postswithdeleted\nwhere deletiondate is not null\ngroup by datediff(w, deletiondate, getdate())\norder by 1", 
        "id": "361472"
    }, 
    {
        "description": "Search for whiners, flag their whines", 
        "title": "Opinionators", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/293132/380574/opinionators", 
        "comments": [
            "I don't agree.", 
            "Good for you, fellow. It seems important that you", 
            "have your own opinion, but it's rarely relevant."
        ], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show text, postid of comments that have in their text  'I don' and end with 'agree' ordered desc by creationdate"
            }
        ], 
        "sql": "select text, postid as [Post Link] from Comments, Posts Where comments.postid = posts.id and comments.userid = posts.ownerUserId and text like '%I don%agree' order by comments.creationdate desc", 
        "sql_plain": "-- I don't agree.\n-- Good for you, fellow. It seems important that you\n-- have your own opinion, but it's rarely relevant.\n\nselect text, postid as [Post Link]\nfrom Comments, Posts\nWhere comments.postid = posts.id\nand comments.userid = posts.ownerUserId \nand text like '%I don%agree'\norder by comments.creationdate desc", 
        "id": "293132"
    }, 
    {
        "description": "", 
        "title": "Koe", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/635701/794696/koe", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show badges"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all name from badges"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all names for badges"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how namy badges are"
            }
        ], 
        "sql": "select name from badges", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nselect name from badges", 
        "id": "635701"
    }, 
    {
        "description": "", 
        "title": "1..", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/636365/795519/1", 
        "comments": [
            "SELECT () as less10, () as from10To20, () as more20"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of posts that have the number of owners less than 10"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select the number of posts grouped by owner user id having less than 10 owner user id"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show number of posts grouped by owner user id that have less than 10 owners"
            }
        ], 
        "sql": "SELECT count(*) FROM Posts GROUP BY OwnerUserId HAVING count(OwnerUserId) < 10", 
        "sql_plain": "--SELECT () as less10, () as from10To20, () as more20\nSELECT count(*) FROM Posts\nGROUP BY OwnerUserId\nHAVING count(OwnerUserId) < 10", 
        "id": "636365"
    }, 
    {
        "description": "", 
        "title": "Users", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/610619/763187/users", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get id, CreationDate,LastAccessDate, differeence between CreationDate and LastAccessDate in days of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get id, creationdate, lastaccessdate and the difference in days between CreationDate and  LastAccessDate for all users"
            }
        ], 
        "sql": "select Id,CreationDate,LastAccessDate,datediff(day,CreationDate,LastAccessDate) from Users", 
        "sql_plain": "select Id,CreationDate,LastAccessDate,datediff(day,CreationDate,LastAccessDate) from Users", 
        "id": "610619"
    }, 
    {
        "description": "", 
        "title": "TotalNumberOfComments", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/326000/421314/totalnumberofcomments", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the first displayed name, number of all users grouped by the displayed name of the user"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for top 1 users get displayname and theis number"
            }
        ], 
        "sql": "select top 1 displayname, count(*) from users group by displayname", 
        "sql_plain": "select top 1 displayname, count(*) from users group by displayname", 
        "id": "326000"
    }, 
    {
        "description": "", 
        "title": ":(", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/362971/467829/", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Select all users with the name displayed as 'Alex A.'"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get all users with the displayed name 'Alex A.'"
            }
        ], 
        "sql": "select * from Users where DisplayName = 'Alex A.'", 
        "sql_plain": "select *\nfrom Users\nwhere DisplayName = 'Alex A.'", 
        "id": "362971"
    }, 
    {
        "description": "", 
        "title": "NewTable", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/381612/490867/newtable", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all post links"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all postlinks"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all postlinks"
            }
        ], 
        "sql": "select * from PostLinks", 
        "sql_plain": "select * from PostLinks", 
        "id": "381612"
    }, 
    {
        "description": "", 
        "title": "awd", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/624316/779787/awd", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "id, reputation, loation and age of the top 10 users from iran desc by reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 10 users from iran"
            }
        ], 
        "sql": "SELECT TOP 10 ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation, Location, age FROM Users WHERE LOWER(Location) LIKE '%iran%' OR UPPER(Location) LIKE '%ir' ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT TOP 10\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,\n    Location,\n    age\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%iran%'\n    OR UPPER(Location) LIKE '%ir'\nORDER BY\n    Reputation DESC;", 
        "id": "624316"
    }, 
    {
        "description": "", 
        "title": "Count", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/591631/741433/count", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 50 Title,Body of possts ordered by CreationDate"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show title and body of top 50 posts ordered by creationdate"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "title and body for top 50 posts sorted by creationdate"
            }
        ], 
        "sql": "SELECT TOP 50 Title, Body FROM Posts ORDER BY CreationDate;", 
        "sql_plain": "SELECT TOP 50 Title, Body FROM Posts ORDER BY CreationDate;", 
        "id": "591631"
    }, 
    {
        "description": "", 
        "title": "Ses", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/333539/430471/ses", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the email hash of users that have id = 2899618"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for user 2899618 get emailhash"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show emailhash for user 2899618"
            }
        ], 
        "sql": "select EmailHash from Users where Id = 2899618", 
        "sql_plain": "select EmailHash from Users where Id = 2899618", 
        "id": "333539"
    }, 
    {
        "description": "", 
        "title": "syn", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/624362/779836/syn", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get sourcetagname, targettagname of TagSynonyms"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show sourcetagname and targettagnam for eveey tagsynonyms"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "sourcetagname and targettagname from tagsynonyms"
            }
        ], 
        "sql": "select SourceTagName, TargetTagName from TagSynonyms", 
        "sql_plain": "select SourceTagName, TargetTagName from TagSynonyms", 
        "id": "624362"
    }, 
    {
        "description": "", 
        "title": "john", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/333062/429884/john", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 10 posts that have 'CDC' in the body"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 10 posts that have a body like 'CDC'"
            }
        ], 
        "sql": "select top 10 * from posts where body like '%CDC%'", 
        "sql_plain": "select top 10 * from posts\nwhere body like '%CDC%'", 
        "id": "333062"
    }, 
    {
        "description": "", 
        "title": "totalusers", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/585243/734546/totalusers", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the total number of id as 'total users', sum of UpVotes as 'total upvotes', sum of downvotes as 'total downvotes' of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show total users, total upvotes and total downvotes for all users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many users are in total and how many upvotes and downvotes were made by users"
            }
        ], 
        "sql": "select count(u.Id) as \"total users\", sum(u.UpVotes) as \"total upvotes\", sum(u.DownVotes) as \"total downvotes\" FROM Users u", 
        "sql_plain": "select count(u.Id) as \"total users\", sum(u.UpVotes) as \"total upvotes\", sum(u.DownVotes) as \"total downvotes\" FROM Users u", 
        "id": "585243"
    }, 
    {
        "description": "", 
        "title": "bbb", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/321714/416097/bbb", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the votes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get everything about votes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show anything about votes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all from votes"
            }
        ], 
        "sql": "select * from votes", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nselect * from votes", 
        "id": "321714"
    }, 
    {
        "description": "", 
        "title": "Questions1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/635199/793968/questions1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "list the tag id and the tags from all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select tagid, tags from posts full join poststags on id"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select tagid, tags from posts full join poststags where posts.id = poststags.postid"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select tagid, tags from posts full join poststags where posts.id is equal to poststags.postid"
            }
        ], 
        "sql": "SELECT TagId, Tags FROM Posts FULL JOIN PostTags ON Posts.Id = PostTags.PostId", 
        "sql_plain": "SELECT TagId, Tags\nFROM Posts\n\nFULL JOIN PostTags\nON Posts.Id = PostTags.PostId", 
        "id": "635199"
    }, 
    {
        "description": "", 
        "title": "math", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/362444/467187/math", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all users with a reputation higher than 200"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the users with reputation over 200"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all users with reputation > 200"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "users with reputation over 200"
            }
        ], 
        "sql": "select * from Users where reputation > 200", 
        "sql_plain": "select * from Users where reputation > 200", 
        "id": "362444"
    }, 
    {
        "description": "", 
        "title": "Explain", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/629898/786699/explain", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with 'compiler-errors' or 'compiler-warnings' in tags and 'explain' in the body"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get all posts where the tags contain 'compiler-errors' or 'compiler-warnings' and the body contain 'explain'"
            }
        ], 
        "sql": "SELECT * FROM Posts WHERE (Tags LIKE '%compiler-errors%' OR Tags LIKE '%compiler-warnings%') AND Body LIKE '%explain%'", 
        "sql_plain": "SELECT * FROM Posts\nWHERE (Tags LIKE '%compiler-errors%' OR Tags LIKE '%compiler-warnings%') \nAND Body LIKE '%explain%'", 
        "id": "629898"
    }, 
    {
        "description": "", 
        "title": "IOT", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/629483/786123/iot", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of posts with 'iot' contained in the tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of posts with tags iot"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of posts with tags like iot"
            }
        ], 
        "sql": "select count(*) from Posts where Tags like 'iot'", 
        "sql_plain": "select count(*) from Posts where Tags like 'iot'", 
        "id": "629483"
    }, 
    {
        "description": "", 
        "title": "Play", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/605639/757005/play", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 10 DisplayName, reputation of Users with reputation > 100000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the displayname and the reputation for those users with reputation > 100000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for top 10 users with reputation over 100000 shoe their displayname and reputation"
            }
        ], 
        "sql": "select top 10 DisplayName, Reputation from Users where Reputation > 100000", 
        "sql_plain": "select top 10 DisplayName, Reputation from Users where Reputation > 100000", 
        "id": "605639"
    }, 
    {
        "description": "", 
        "title": "csharp", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/574520/722842/csharp", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the first 1000 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "ddisplay top 1000 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all informations for top 1000 posts"
            }
        ], 
        "sql": "select top(1000) * from Posts;", 
        "sql_plain": "select top(1000) * from Posts;", 
        "id": "574520"
    }, 
    {
        "description": "", 
        "title": "Tr", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/618271/772566/tr", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show id and reputation off users from turkey with reputation over over 1000, rdered by reputation descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id reputation for user from turkey reputattion >= 1000 order reputation desc"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation FROM Users WHERE LOWER(Location) LIKE '%turkey%' OR UPPER(Location) LIKE '%TURKEY%' or Location like '%Turkey%' AND Reputation >= 1000 ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%turkey%'\n    OR UPPER(Location) LIKE '%TURKEY%'\n    or Location like '%Turkey%'\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;", 
        "id": "618271"
    }, 
    {
        "description": "", 
        "title": "ddf", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/290864/377779/ddf", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the number of posts that have body = 'test' and id > 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many posts have body 'test' and have an id dgreater than 1"
            }
        ], 
        "sql": "select count(*) from posts where body='test'and id>1", 
        "sql_plain": "select count(*) from posts\nwhere body='test'and id>1", 
        "id": "290864"
    }, 
    {
        "description": "", 
        "title": "apple", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/385167/495068/apple", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the databases"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all from sys.database"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all information from sys.databases"
            }
        ], 
        "sql": "select * from sys.databases", 
        "sql_plain": "select *\nfrom sys.databases", 
        "id": "385167"
    }, 
    {
        "description": "", 
        "title": "das", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/616646/770633/das", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show top 100 id, displayname, reputation, location, views, upvote, downvote and age for users from 'Sofia' or 'Plovdiv' or 'Varna' or 'Bulgaria' sorted descending by reputation"
            }
        ], 
        "sql": "SELECT TOP 100 Id, DisplayName, Reputation, Location, Views, UpVotes, DownVotes, Age FROM Users WHERE Location LIKE '%Sofia%' or Location LIKE '%Plovdiv%' or Location LIKE '%Varna%' or Location LIKE '%Bulgaria%' ORDER BY Reputation DESC", 
        "sql_plain": "SELECT TOP 100\n  Id,\n  DisplayName,\n  Reputation,\n  Location,\n  Views,\n  UpVotes,\n  DownVotes,\n  Age\nFROM\n  Users\nWHERE \n  Location LIKE '%Sofia%' \n  or Location LIKE '%Plovdiv%'\n  or Location LIKE '%Varna%'\n  or Location LIKE '%Bulgaria%'\nORDER BY Reputation DESC", 
        "id": "616646"
    }, 
    {
        "description": "", 
        "title": "testsql", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/352441/454869/testsql", 
        "comments": [
            "SELECT TOP 100", 
            "POSTS.Title,", 
            "POSTS.ID,", 
            "USERS.REPUTATION", 
            "from POSTS,", 
            "USERS", 
            "WHERE POSTS.ID = USERS.ID and", 
            "POSTS.BODY LIKE '%echo%'"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the total number of posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all informations for all posts"
            }
        ], 
        "sql": "select count(*) from POSTS", 
        "sql_plain": "--SELECT TOP 100\n--       POSTS.Title,\n--       POSTS.ID,\n--       USERS.REPUTATION\n--from POSTS,\n--     USERS\n--WHERE POSTS.ID = USERS.ID and\n--      POSTS.BODY LIKE '%echo%'\n      \n      select count(*) from POSTS", 
        "id": "352441"
    }, 
    {
        "description": "", 
        "title": "compiler-errors", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/632972/791070/compiler-errors", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the number of posts that have a tag containing <compiler-errors>"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many <compiler-errors> are"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "which posts contains <compiler-errors>"
            }
        ], 
        "sql": "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%<compiler-errors>%'", 
        "sql_plain": "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%<compiler-errors>%'", 
        "id": "632972"
    }, 
    {
        "description": "", 
        "title": "Prova2", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/633486/791745/prova2", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the tag id and the total number of post tags that have the same id as the id of the Tag"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select tagid, number as total from posttags, group by tag, orded by total"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select the id and the number of all poststags that are tags grouped by tagid and orderedd by number"
            }
        ], 
        "sql": "SELECT pt.TagId, COUNT(*) AS total FROM PostTags pt INNER JOIN Tags t ON t.Id = pt.TagId GROUP BY pt.TagId ORDER BY total;", 
        "sql_plain": "SELECT pt.TagId, COUNT(*) AS total\n  FROM PostTags pt\n  INNER JOIN Tags t ON t.Id = pt.TagId\nGROUP BY pt.TagId\nORDER BY total;", 
        "id": "633486"
    }, 
    {
        "description": "", 
        "title": "Harsh", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/329886/426116/harsh", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all users with reputation > 2059"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users with reputation 2059"
            }
        ], 
        "sql": "select * from users where Reputation = 2059;", 
        "sql_plain": "select * from users where Reputation = 2059;", 
        "id": "329886"
    }, 
    {
        "description": "", 
        "title": "Location", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/582412/731472/location", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get Location of Users that contains 'chennai'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show location for all users from 'chennai'"
            }
        ], 
        "sql": "SELECT Location FROM Users WHERE Location like '%chennai%' GROUP BY Location", 
        "sql_plain": "SELECT Location FROM Users WHERE Location  like '%chennai%'  GROUP BY Location", 
        "id": "582412"
    }, 
    {
        "description": "", 
        "title": "rr", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/590903/740612/rr", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show, numbered, the id, reputation and location of those users from 'Kerala' and have reputation greater than 1000"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation,Location FROM Users WHERE Location ='Kerala' and Reputation >1000", 
        "sql_plain": "SELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation,Location\nFROM\n    Users\nWHERE \n   Location ='Kerala' and Reputation >1000", 
        "id": "590903"
    }, 
    {
        "description": "", 
        "title": "191316", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/338017/436318/191316", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 10 posts that have the id equal to 191316"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get top 10 posts that have id equal to 191316"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for idd 191316, get top 10 posts"
            }
        ], 
        "sql": "SELECT TOP 10 * FROM posts WHERE Id=191316", 
        "sql_plain": "SELECT TOP 10 * FROM posts WHERE Id=191316", 
        "id": "338017"
    }, 
    {
        "description": "", 
        "title": "MSR-Paper-Query-Unix-1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/571024/718996/msr-paper-query-unix-1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of different tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many distinct tagsname are there?"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "count the number of unique tagnames"
            }
        ], 
        "sql": "SELECT COUNT(DISTINCT(TagName)) FROM Tags;", 
        "sql_plain": "SELECT COUNT(DISTINCT(TagName)) FROM Tags;", 
        "id": "571024"
    }, 
    {
        "description": "", 
        "title": "SimpleQuery", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/599916/750873/simplequery", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get AccountID,Age,Location of users taht have Age = 28 and Location = 'Cracow'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show acoountid, along with their age and location for all users thata are 28 years old and are in 'Cracow'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for all users that are 28 and are in 'Cracow', show accountid, age and location"
            }
        ], 
        "sql": "SELECT AccountId, Age, Location FROM Users WHERE Age = 28 AND Location = 'Cracow';", 
        "sql_plain": "SELECT AccountId, Age, Location\nFROM Users \nWHERE Age = 28 AND Location = 'Cracow';", 
        "id": "599916"
    }, 
    {
        "description": "", 
        "title": "UniqueSkills", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/616889/770927/uniqueskills", 
        "comments": [
            "select * from TagSynonyms t where t.TargetTagName = 'css'", 
            "select TargetTagName, count(*) c", 
            "from TagSynonyms", 
            "group by TargetTagName", 
            "order by c, TargetTagName asc", 
            "select top 100 t.TagName, e.Body Excerpt, w.Body Wiki", 
            "from Tags t", 
            "left join Posts e on t.ExcerptPostId=e.Id", 
            "left join Posts w on t.WikiPostId=w.Id", 
            "where TagName='cobol'", 
            "select count(*)", 
            "from", 
            "(", 
            "select distinct TagName from Tags t", 
            "where t.Count > 1000", 
            ") as a"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all tags with count > 1000"
            }
        ], 
        "sql": "select * from Tags t where t.Count > 1000", 
        "sql_plain": "--select * from TagSynonyms t where t.TargetTagName = 'css'\n\n--select TargetTagName, count(*) c\n--from TagSynonyms\n--group by TargetTagName\n--order by c, TargetTagName asc\n\n--select top 100 t.TagName, e.Body Excerpt, w.Body Wiki\n--from Tags t\n--left join Posts e on t.ExcerptPostId=e.Id\n--left join Posts w on t.WikiPostId=w.Id\n--where TagName='cobol'\n\n--select count(*)\n--from \n--(\n--select distinct TagName from Tags t\n--where t.Count > 1000\n--) as a\n\nselect * from Tags t\nwhere t.Count > 1000", 
        "id": "616889"
    }, 
    {
        "description": "", 
        "title": "top-users-cuba", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/641149/800915/top-users-cuba", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the highest reputation users from 'jaipur' with reputation greater than 1000 ordered by descending reputation"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the users with reputation higher than 1000 and location 'jaipur' ordered by descending reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "which users from jaipur have reputation over 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all users from jaipur that have reputation over 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the id and reputation of all users from jaipur that have reputation greater than 1000"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Reputation FROM Users WHERE LOWER(Location) LIKE '%jaipur%' AND Reputation >= 1000 ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link], \n    Reputation\nFROM\n    Users\nWHERE\n    LOWER(Location) LIKE '%jaipur%'\n    AND Reputation >= 1000\nORDER BY\n    Reputation DESC;", 
        "id": "641149"
    }, 
    {
        "description": "", 
        "title": "k.", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/367315/473341/k", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the text of the comment with id 1000"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List the text of the 1000th comment"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show text from comments with id = 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select text fom comments that  has id 1000"
            }
        ], 
        "sql": "select Text AS Inhalt from Comments where Comments.Id=1000;", 
        "sql_plain": "select Text AS Inhalt from Comments where Comments.Id=1000;", 
        "id": "367315"
    }, 
    {
        "description": "", 
        "title": "MSR-Paper-Query-SO-1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/569021/716936/msr-paper-query-so-1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of distinct users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many different ids for tags are there?"
            }
        ], 
        "sql": "SELECT COUNT(DISTINCT(Id)) FROM Tags;", 
        "sql_plain": "SELECT COUNT(DISTINCT(Id)) FROM Tags;", 
        "id": "569021"
    }, 
    {
        "description": "", 
        "title": "userid1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/389926/500392/userid1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get posts from user that has id = 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select different owner user id and ownerdisplayname where owneruserid=1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show distinct owneruserid, ownerdisplayname that has owneruserid 1"
            }
        ], 
        "sql": "select distinct owneruserid, ownerdisplayname from Posts where owneruserid = 1", 
        "sql_plain": "select distinct owneruserid, ownerdisplayname\nfrom Posts \nwhere owneruserid  = 1", 
        "id": "389926"
    }, 
    {
        "description": "", 
        "title": "saSA", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/607333/758940/sasa", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show all comments whose text contains ' new File(\"resources/images/\", image)'"
            }
        ], 
        "sql": "SELECT * FROM Comments WHERE Text LIKE '% new File(\"resources/images/\", image)%';", 
        "sql_plain": "SELECT *  FROM Comments WHERE Text LIKE '% new File(\"resources/images/\", image)%';", 
        "id": "607333"
    }, 
    {
        "description": "", 
        "title": "ik", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/622176/777375/ik", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with posttypeid = 1 and title containing 'female'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all posts for posttypeid 1 and title 'female'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for posttypeid 1 and title 'female' show all posts"
            }
        ], 
        "sql": "select * from posts where posttypeid = 1 and title like '%female%'", 
        "sql_plain": "select * from posts where  posttypeid = 1 and title like '%female%'", 
        "id": "622176"
    }, 
    {
        "description": "", 
        "title": "dddd", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/607412/759044/dddd", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get top 100 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 100 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 100 posts"
            }
        ], 
        "sql": "select TOP(100) * from posts", 
        "sql_plain": "select TOP(100)  * from posts", 
        "id": "607412"
    }, 
    {
        "description": "", 
        "title": "MYQUERY", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/623417/778827/myquery", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 20 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 20 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 20 posts"
            }
        ], 
        "sql": "SELECT TOP (20) * FROM POSTS", 
        "sql_plain": "SELECT TOP (20) * FROM POSTS", 
        "id": "623417"
    }, 
    {
        "description": "", 
        "title": "Votes", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/608744/760752/votes", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description", 
            "join users u on u.id = v.userid"
        ], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "get id as postId, name as postType and name as voteType for all posts that have id = 14628012 or parentid = 14628012"
            }
        ], 
        "sql": "select p.id as postId, p.ownerdisplayname, pt.name as postType, vt.name as voteType from posts p join posttypes pt on pt.id = p.posttypeid join votes v on v.postid = p.id join votetypes vt on vt.id = v.votetypeid where p.id = 14628012 or p.parentid = 14628012", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nselect p.id as postId,\n    p.ownerdisplayname,\n    pt.name as postType,\n    vt.name as voteType\nfrom posts p\njoin posttypes pt on pt.id = p.posttypeid\njoin votes v on v.postid = p.id\njoin votetypes vt on vt.id = v.votetypeid\n--join users u on u.id = v.userid\nwhere p.id = 14628012\nor p.parentid = 14628012", 
        "id": "608744"
    }, 
    {
        "description": "", 
        "title": "try1-hongfei", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/381121/490341/try1-hongfei", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get top 100 posts from users with id's 5468160 or 4934748"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 100 posts of users between 5468160 and 4934748"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for users between 5468160 and 4934748 show top 100 posts"
            }
        ], 
        "sql": "select top 100 * from posts where owneruserid in (5468160, 4934748);", 
        "sql_plain": "select top 100 * from posts \nwhere owneruserid in \n(5468160, 4934748);", 
        "id": "381121"
    }, 
    {
        "description": "", 
        "title": "saqs", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/591904/741673/saqs", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get top 100 tags, average CommentCount as AvgCom of posts ordered by AvgCom"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 100 tags and their average comment count for all posts sorted by average, descending"
            }
        ], 
        "sql": "SELECT TOP 100 Tags, AVG(CommentCount) AS AvgCom FROM Posts GROUP BY Tags ORDER BY AvgCom DESC", 
        "sql_plain": "SELECT \nTOP 100\n Tags, AVG(CommentCount) AS AvgCom\nFROM\n Posts\nGROUP BY \n Tags\nORDER BY\n AvgCom DESC", 
        "id": "591904"
    }, 
    {
        "description": "", 
        "title": "aaa", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/618663/773135/aaa", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 10000 id, body of posts with viewcount > 10000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id, body for posts with viewCount > 10000 top 10000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 10000 posts id, body for fosts with ViewCount>10000"
            }
        ], 
        "sql": "select top 10000 Posts.id, Posts.body from posts where posts.ViewCount>10000", 
        "sql_plain": "select top 10000 Posts.id, Posts.body from posts where posts.ViewCount>10000", 
        "id": "618663"
    }, 
    {
        "description": "", 
        "title": "SaltQs", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/289111/375726/saltqs", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get top 10 body of posts with 'salt' in the tags and order by descending score"
            }
        ], 
        "sql": "SELECT TOP 10 Body FROM Posts WHERE Tags LIKE '%salt%' ORDER BY Score DESC", 
        "sql_plain": "SELECT TOP 10\n  Body\nFROM Posts\nWHERE Tags LIKE '%salt%'\nORDER BY Score DESC", 
        "id": "289111"
    }, 
    {
        "description": "", 
        "title": "one", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/618511/772875/one", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List title, score, ViewCount of Posts ordered by descending Score and ascending Viewcount"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show title, score, viewcount of all posts, ordered by score dedscending and by viewcount ascending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "title, viewcount, score of posts, order score desc, viewcount asc"
            }
        ], 
        "sql": "select Title, Score, ViewCount from Posts order by Score desc, ViewCount asc", 
        "sql_plain": "select Title, Score, ViewCount\n  from Posts\n  order by Score desc, ViewCount asc", 
        "id": "618511"
    }, 
    {
        "description": "", 
        "title": "Java", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/641383/801369/java", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the title, view count and tags of all posts that have 'Exception' in title and number of views greater than 40000 ordered by decending views"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select title, view count, tags from posts where title is like Exception and has more than 40000 views"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select title, viewcount and tags of posts that have their title like Exception and more than 40000 views"
            }
        ], 
        "sql": "SELECT Posts.Title As [Post link], ViewCount, tags from Posts where Title like '%Exception%' and ViewCount> 40000 order by ViewCount desc", 
        "sql_plain": "SELECT Posts.Title As [Post link], ViewCount, tags  from Posts where Title like '%Exception%' and ViewCount> 40000 order by ViewCount desc", 
        "id": "641383"
    }, 
    {
        "description": "", 
        "title": "listTags", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/616333/770309/listtags", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get id, tagname of tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id and tagsname"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id and tagname for all tags"
            }
        ], 
        "sql": "select id, tagname from tags;", 
        "sql_plain": "select id, tagname from tags;", 
        "id": "616333"
    }, 
    {
        "description": "", 
        "title": "Q5", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/292283/379586/q5", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 50000 posts that have viewcount between 0 and 10343 ordered by descending viewcount"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display top 50000 posts with viewcount greater than 0 and dless than 10343, sorted by viewcount descending"
            }
        ], 
        "sql": "select top 50000 * from posts where posts.ViewCount < 10343 AND posts.ViewCount > 0 ORDER BY posts.ViewCount DESC", 
        "sql_plain": "select top 50000 * from posts where posts.ViewCount < 10343 AND posts.ViewCount > 0 ORDER BY \nposts.ViewCount DESC", 
        "id": "292283"
    }, 
    {
        "description": "", 
        "title": "TopViewedPosts", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/359682/463954/topviewedposts", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the creation date, the number of views, tags and the favourite count of all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show creationdate, viewcount, tags and dfevoritecount of posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "from all posts get CreationDate, ViewCount, Tags, FavoriteCount"
            }
        ], 
        "sql": "select CreationDate, ViewCount, Tags, FavoriteCount from Posts", 
        "sql_plain": "select CreationDate, ViewCount, Tags, FavoriteCount\nfrom Posts", 
        "id": "359682"
    }, 
    {
        "description": "", 
        "title": "Testquery", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/575708/724151/testquery", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get id of Badges"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all ids for a badge"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all ids possible for a badge"
            }
        ], 
        "sql": "select Id FROM Badges", 
        "sql_plain": "select Id FROM Badges", 
        "id": "575708"
    }, 
    {
        "description": "", 
        "title": "Data", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/328408/424335/data", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 10000 id and body of posts that have the number of views > 10000"
            }
        ], 
        "sql": "select top 10000 Posts.id, Posts.body from posts where posts.ViewCount>10000", 
        "sql_plain": "select top 10000 Posts.id, Posts.body from posts where posts.ViewCount>10000", 
        "id": "328408"
    }, 
    {
        "description": "", 
        "title": "test3", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/327321/422938/test3", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the average score of posts with id between 200 and 300"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the average score for those posts that have idd between 200 and 300"
            }
        ], 
        "sql": "select AVG(Score) from Posts where Id >200 and Id<300;", 
        "sql_plain": "select AVG(Score) from Posts where Id >200 and Id<300;", 
        "id": "327321"
    }, 
    {
        "description": "", 
        "title": "Time", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/317772/411516/time", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the creation date of users that have reputation < 101 ordered by creation date"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show only creationdate for users with reputation less than 101, ordered by creationdate descending"
            }
        ], 
        "sql": "SELECT CreationDate FROM Users WHERE Reputation < 101 ORDER BY CreationDate ASC", 
        "sql_plain": "SELECT CreationDate\nFROM Users\nWHERE Reputation < 101\nORDER BY CreationDate ASC", 
        "id": "317772"
    }, 
    {
        "description": "", 
        "title": "skills", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/307893/398774/skills", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get targettagname of tagsynonyms for targettagname that contains 'java'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show TargetTagName for TagSynonyms that have 'jave' in TargetTagName"
            }
        ], 
        "sql": "select TargetTagName from TagSynonyms where TargetTagName Like '%java%'", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nselect TargetTagName from TagSynonyms\nwhere TargetTagName Like '%java%'", 
        "id": "307893"
    }, 
    {
        "description": "", 
        "title": "Voting", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/326504/421955/voting", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the date and total number of badges with the name = 'Constituent' grouped and ordered by date"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show date, and how many bagdes 'Constituent' were awarded then, ordered by date"
            }
        ], 
        "sql": "Select Date, Count(Id) From Badges Where Name = 'Constituent' Group By (DatePart(Hour, Date) % 4), Date Order By Date", 
        "sql_plain": "Select \n     Date,\n     Count(Id)\nFrom Badges\nWhere Name = 'Constituent'\nGroup By (DatePart(Hour, Date) % 4), Date\nOrder By Date", 
        "id": "326504"
    }, 
    {
        "description": "", 
        "title": "1st", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/631014/788461/1st", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the display name, id, location and reputation of all users, ordered by descending reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "SELECT DisplayName, Id, Location, Reputationof all usersORDERed BY Reputation DESCending"
            }
        ], 
        "sql": "SELECT DisplayName, Id, Location, Reputation FROM Users ORDER BY Reputation DESC;", 
        "sql_plain": "SELECT DisplayName, Id, Location, Reputation\nFROM Users\nORDER BY Reputation DESC;", 
        "id": "631014"
    }, 
    {
        "description": "", 
        "title": "dbs", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/288882/375483/dbs", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the sum of commentcount of posts that have closeddate >'1.1.2013' AND LastActivityDate < '1.1.2014'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many comment were mate to posts that have their closeddate after '1.1.2013' and their LastActivityDate before '1.1.2014'"
            }
        ], 
        "sql": "SELECT SUM(CommentCount) FROM Posts WHERE ClosedDate > '1.1.2013' AND LastActivityDate < '1.1.2014'", 
        "sql_plain": "SELECT SUM(CommentCount) FROM Posts \nWHERE ClosedDate > '1.1.2013' AND LastActivityDate < '1.1.2014'", 
        "id": "288882"
    }, 
    {
        "description": "", 
        "title": "Graph!", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/300408/389438/graph", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the score and the number of scores of posts that have score > 10 and score < 100 ordered by score"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the score and the total number of score of posts with score between 10 and 100"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display score, the number of scores for posts with score between 10 and 100, ordered by score"
            }
        ], 
        "sql": "select score, count(score) from posts where score > 10 and score < 100 group by score order by score", 
        "sql_plain": "select score, count(score) from posts where score > 10 and score < 100 group by score order by score", 
        "id": "300408"
    }, 
    {
        "description": "", 
        "title": "Ddl", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/591524/741316/ddl", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all columns of Information_Schema for table_name 'Users'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "whow all informations about INFORMATION_SCHEMA.COLUMNS that have table_name 'Users'"
            }
        ], 
        "sql": "Select * From INFORMATION_SCHEMA.COLUMNS Where TABLE_NAME = 'Users'", 
        "sql_plain": "Select * From INFORMATION_SCHEMA.COLUMNS Where TABLE_NAME = 'Users'", 
        "id": "591524"
    }, 
    {
        "description": "", 
        "title": "searching", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/337881/436183/searching", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all the users that have displayed name containing 'Undhad'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display all informations for those users that have 'Undhad' in their displayname"
            }
        ], 
        "sql": "SELECT * FROM [Users] where DisplayName like '%Undhad%'", 
        "sql_plain": "SELECT * FROM [Users] where DisplayName like '%Undhad%'", 
        "id": "337881"
    }, 
    {
        "description": "", 
        "title": "SkillsAndDescription", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/616936/770979/skillsanddescription", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show tagname, count, body excerpt for all tags with count > 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for tags with more than 1000 count get tagname, count, body excerpt"
            }
        ], 
        "sql": "select t.TagName, t.Count, e.Body Excerpt from Tags t left join Posts e on t.ExcerptPostId=e.Id where t.Count > 1000", 
        "sql_plain": "select t.TagName, t.Count, e.Body Excerpt\nfrom Tags t\nleft join Posts e on t.ExcerptPostId=e.Id\nwhere t.Count > 1000", 
        "id": "616936"
    }, 
    {
        "description": "", 
        "title": "edrian", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/575348/723796/edrian", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the first post"
            }
        ], 
        "sql": "SELECT TOP 1 * FROM POSTS", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nSELECT TOP 1 * FROM POSTS", 
        "id": "575348"
    }, 
    {
        "description": "", 
        "title": "stackOver", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/309741/401333/stackover", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 10000 id, body of posts the have viewcount > 10000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for posts with more than 10000 viewcount show id and body for the top 10000"
            }
        ], 
        "sql": "select top 10000 Posts.id, Posts.body from posts where posts.ViewCount>10000", 
        "sql_plain": "select top 10000 Posts.id, Posts.body from posts where posts.ViewCount>10000", 
        "id": "309741"
    }, 
    {
        "description": "", 
        "title": "fb_analytics_query", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/622519/777752/fb-analytics-query", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with 'facebook-analytics' tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all posts with tags 'facebook-analytics'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "posts that have 'facebook-analytics' tag"
            }
        ], 
        "sql": "SELECT * FROM Posts WHERE Tags = 'facebook-analytics'", 
        "sql_plain": "SELECT * \nFROM Posts\nWHERE Tags = 'facebook-analytics'", 
        "id": "622519"
    }, 
    {
        "description": "", 
        "title": "posts", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/640921/800677/posts", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all comments from posts that have been created earlier than 2014"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get all coments for posts created after 2014"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all comments that are after 2014"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show those coments that after 2014"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "which comments are after 2014"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all comments that have their creation date after 2014"
            }
        ], 
        "sql": "select * from Comments where PostId IN (sELECT Id from Posts where YEAR(CreationDate)>2014);", 
        "sql_plain": "select * from Comments \nwhere PostId \n IN (sELECT Id from Posts where YEAR(CreationDate)>2014);", 
        "id": "640921"
    }, 
    {
        "description": "", 
        "title": "myQuery1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/298352/387041/myquery1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all posts ordered by id"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all posts sorted by id"
            }
        ], 
        "sql": "SELECT * FROM Posts ORDER BY Posts.Id", 
        "sql_plain": "SELECT * FROM Posts\nORDER BY Posts.Id", 
        "id": "298352"
    }, 
    {
        "description": "", 
        "title": "Junk", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/384849/494744/junk", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show posts"
            }
        ], 
        "sql": "Select * from Posts", 
        "sql_plain": "Select * from Posts", 
        "id": "384849"
    }, 
    {
        "description": "", 
        "title": "rep5000", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/231200/449922/rep5000", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the id, reputation of users that have the reputation bigger than 100000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id and dreputation for those users with reputation over 100000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for those users with reputation over 100000, get id and reputation"
            }
        ], 
        "sql": "select id, reputation from users where reputation > 100000;", 
        "sql_plain": "select id, reputation from users\nwhere reputation > 100000;", 
        "id": "231200"
    }, 
    {
        "description": "", 
        "title": "Atlanta", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/633850/792138/atlanta", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all users ordered by descending reputation with atlanta as location"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List all the users that are located in atlanta ordered by descending reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all from users where location like 'atlanta' order by reputation desc"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all users from atlanta ordered by reputation"
            }
        ], 
        "sql": "select * from Users where Location like '%atlanta%' order by Reputation desc", 
        "sql_plain": "select *\nfrom Users\nwhere Location like '%atlanta%'\norder by Reputation desc", 
        "id": "633850"
    }, 
    {
        "description": "", 
        "title": "Numbers", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/322396/416934/numbers", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all the users that have the numeric value of their display name = 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all users that have displayname 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for displayname 1, get all users"
            }
        ], 
        "sql": "SELECT * FROM Users WHERE ISNUMERIC(DisplayName) = 1", 
        "sql_plain": "SELECT *\nFROM Users\nWHERE ISNUMERIC(DisplayName) = 1", 
        "id": "322396"
    }, 
    {
        "description": "", 
        "title": "2014user", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/378577/487461/2014user", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of users created in 2014"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the number of users that were created in 2014"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of users in 2014"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many users registeredd in 2014"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how namy userts has creationdadte in 2014"
            }
        ], 
        "sql": "select count(id) from users where creationDate >= '2014-01-01' and creationDate <= '2014-12-31';", 
        "sql_plain": "select count(id) from users where creationDate >= '2014-01-01' and creationDate <= '2014-12-31';", 
        "id": "378577"
    }, 
    {
        "description": "", 
        "title": "DOI", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/365913/471516/doi", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the body of posts that have 'doi.org' in the body"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List all bodies for posts that contain 'doi.org' in the body"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show body that contains 'doi.org' from posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all posts that have in their body 'doi.org'"
            }
        ], 
        "sql": "select Body from Posts where Body like '%doi.org%';", 
        "sql_plain": "select Body from Posts where Body like '%doi.org%';", 
        "id": "365913"
    }, 
    {
        "description": "", 
        "title": "Comments", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/610601/763161/comments", 
        "comments": [
            "Comments", 
            "All comments on Stack Overflow"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all comments"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all comments"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all coments"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "please select all of the comments"
            }
        ], 
        "sql": "SELECT * FROM COMMENTS", 
        "sql_plain": "-- Comments\n-- All comments on Stack Overflow\n\nSELECT * FROM COMMENTS", 
        "id": "610601"
    }, 
    {
        "description": "", 
        "title": "randotag", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/380724/489922/randotag", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List a random tag that has been used more than 100 times"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show last id from tags that has count > 100"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for the newest id that has count > 100 show first tag"
            }
        ], 
        "sql": "select top 1 * from Tags where count > 100 order by newid()", 
        "sql_plain": "select\ntop 1\n*\nfrom Tags\nwhere count > 100\norder by newid()", 
        "id": "380724"
    }, 
    {
        "description": "", 
        "title": "whoops", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/335943/433824/whoops", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 10 comments ordered by descending score"
            }
        ], 
        "sql": "SELECT TOP 10 * FROM Comments ORDER BY Score DESC;", 
        "sql_plain": "SELECT TOP 10 * FROM Comments ORDER BY Score DESC;", 
        "id": "335943"
    }, 
    {
        "description": "", 
        "title": "newwww", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/318965/412786/newwww", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all the CloseAsOffTopicReasonTypes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all from CloseAsOffTopicReasonTypes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get everything about CloseAsOffTopicReasonTypes"
            }
        ], 
        "sql": "select * from CloseAsOffTopicReasonTypes;", 
        "sql_plain": "select * from CloseAsOffTopicReasonTypes;", 
        "id": "318965"
    }, 
    {
        "description": "", 
        "title": "GetUserData", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/619479/774042/getuserdata", 
        "comments": [
            "Top users by location", 
            "List of users in 'Location', by reputation score.", 
            "Forked from an original query by BoltClock."
        ], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "id, location and reputation for users with reputation over 1000000 sorted desc by reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for users with reputation > 100000 get id, location and reputation orderedd by reputation"
            }
        ], 
        "sql": "SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], Id AS [User Link], Location, Reputation FROM Users WHERE Reputation > 100000 ORDER BY Reputation DESC;", 
        "sql_plain": "-- Top users by location\n-- List of users in 'Location', by reputation score.\n-- \n-- Forked from an original query by BoltClock.\n\nSELECT\n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], \n    Id AS [User Link],\n    Location,\n    Reputation\nFROM\n    Users\n    \nWHERE\n    Reputation > 100000\n\nORDER BY\n    Reputation DESC;", 
        "id": "619479"
    }, 
    {
        "description": "", 
        "title": "uj", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/391571/502275/uj", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List highest reputation posts with tags like c++,stl,boost and opengl from users in Moscow"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get top posts from users in Moscow that have c++,stl,boost or opengl tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select id, reputation tagname where location is moscow and tagnae is c++, stl, boost, opengl, grouped by idd, tagname and reputation"
            }
        ], 
        "sql": "WITH USER_BY_TAG AS ( SELECT ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#], u.Id AS [User Link], u.Reputation, TagName, (SELECT CONCAT(Tagname, ' ')) Tagz FROM Tags t INNER JOIN PostTags pt ON pt.TagId = t.id INNER JOIN Posts p ON p.ParentId = pt.PostId INNER JOIN Votes v ON v.PostId = p.Id and VoteTypeId = 2 INNER JOIN Users u ON u.Id = p.OwnerUserId WHERE LOWER(Location) LIKE '%moscow%' AND TagName IN ('c++','stl','boost','opengl') GROUP BY u.id, TagName, u.Reputation ) SELECT * FROM USER_BY_TAG ORDER BY Reputation DESC ;", 
        "sql_plain": "WITH USER_BY_TAG\nAS\n(\n  SELECT \n    ROW_NUMBER() OVER(ORDER BY Reputation DESC) AS [#],\n    u.Id AS [User Link], \n    u.Reputation,\n    TagName,\n    (SELECT CONCAT(Tagname, ' ')) Tagz\n  FROM Tags t\n      INNER JOIN PostTags pt ON pt.TagId = t.id\n      INNER JOIN Posts     p ON p.ParentId = pt.PostId\n      INNER JOIN Votes     v ON v.PostId = p.Id and VoteTypeId = 2\n      INNER JOIN Users     u ON u.Id = p.OwnerUserId\n  WHERE \n      LOWER(Location) LIKE '%moscow%'\n      AND  TagName IN ('c++','stl','boost','opengl')\n       \n  GROUP BY u.id, TagName, u.Reputation\n)\n\nSELECT * FROM USER_BY_TAG ORDER BY Reputation DESC ;", 
        "id": "391571"
    }, 
    {
        "description": "", 
        "title": "software_eng_tags", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/636134/795202/software-eng-tags", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id and tag name of all tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select id and tagname from tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id and tag name for all tags"
            }
        ], 
        "sql": "select Id,TagName from Tags", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\nselect Id,TagName from Tags", 
        "id": "636134"
    }, 
    {
        "description": "", 
        "title": "testquery", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/636841/796059/testquery", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all users that don't have a null or empty AboutMe"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get all users that have an about me description"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all from users where about me is not null and about me different than ''"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all from users where aoubt me is not blank"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users that does not have about me empty"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all users that doesn't have about me empty"
            }
        ], 
        "sql": "select * from Users where AboutMe IS NOT null and AboutMe != ''", 
        "sql_plain": "select * from Users where AboutMe IS NOT null and AboutMe != ''", 
        "id": "636841"
    }, 
    {
        "description": "", 
        "title": "Weka", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/349692/451070/weka", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with 'Weka' in the title or body and the score higher than 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display all posts that have 'weka' in either title or body and have a score higher than 1"
            }
        ], 
        "sql": "Select * From Posts Where Title like '%Weka%' Or Body like '%Weka%' And Score >1", 
        "sql_plain": "Select *\nFrom Posts\nWhere Title like '%Weka%'\nOr Body like '%Weka%'\nAnd Score >1", 
        "id": "349692"
    }, 
    {
        "description": "", 
        "title": "MyComments", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/622497/777737/mycomments", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all comments for userid = 5752362"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all comments for user 5752362 ordered descending by creationdate"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "user 5752362 all comments descending by date"
            }
        ], 
        "sql": "select * from comments where userid=5752362 order by creationDate desc", 
        "sql_plain": "select * from comments where userid=5752362 order by creationDate desc", 
        "id": "622497"
    }, 
    {
        "description": "", 
        "title": "java", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/607474/759131/java", 
        "comments": [
            "t.TagId = 1589"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List total number of posts as 'QuestionCOunt' than have the same id as posttags TagID and posttypeid is not 2"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many posts have posttypeid not 2"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of posts thata have PostTypeId != 2"
            }
        ], 
        "sql": "SELECT Count(*) AS QuestionCount FROM Posts p JOIN PostTags t on p.Id = t.TagId WHERE p.PostTypeId != 2", 
        "sql_plain": "SELECT \n    Count(*) AS QuestionCount\nFROM \n    Posts p\nJOIN PostTags t on p.Id = t.TagId\nWHERE \n    --t.TagId = 1589\n    p.PostTypeId != 2", 
        "id": "607474"
    }, 
    {
        "description": "", 
        "title": "TFIDF", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/640240/799933/tfidf", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the first 50000 posts that have total views higher than 1000000 ordered by the view count descending"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List the top 50000 posts with view count greater than 1000000, ordered by number of views descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select top 50000 posts where view count is greater than 1000000 ordered by view count"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 50000 posts that have more than 1000000 views ordered by views"
            }
        ], 
        "sql": "select top 50000 * from posts where posts.ViewCount > 1000000 ORDER BY posts.ViewCount", 
        "sql_plain": "select top 50000 * from posts where posts.ViewCount > 1000000 ORDER BY posts.ViewCount", 
        "id": "640240"
    }, 
    {
        "description": "", 
        "title": "Kebab", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/288636/375247/kebab", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 20 displayname of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show displayname fop top 20 users"
            }
        ], 
        "sql": "SELECT TOP(20) DisplayName FROM Users;", 
        "sql_plain": "SELECT TOP(20) DisplayName\nFROM Users;", 
        "id": "288636"
    }, 
    {
        "description": "", 
        "title": "dataTime", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/383707/493383/datatime", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 50 posts created in the second half of 2008 that don't have empty tags"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get top 50 posts with tags created between July and December of 2008"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List top 50 posts that have tags and were created in the last 6 months of 2008"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 50 posts only id, tags, bodyd, viewcountand creationdate with tags!= null, year 2008, month between 7 and 12"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, tags, body, viewcount, score, creation date of top 50 posts thata have tags != null, are created in 2008, between july and december"
            }
        ], 
        "sql": "SELECT TOP 50 Id, Tags, Body, ViewCount, Score, CreationDate FROM Posts where Tags is not NULL and Year(CreationDate) = 2008 and Month(CreationDate) >= 7 and Month(CreationDate) <= 12", 
        "sql_plain": "SELECT TOP 50 Id, Tags, Body, ViewCount, Score, CreationDate FROM Posts where Tags is not NULL and Year(CreationDate) = 2008 and Month(CreationDate) >= 7 and Month(CreationDate) <= 12", 
        "id": "383707"
    }, 
    {
        "description": "", 
        "title": "awk", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/621098/776026/awk", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with tags = 'awk' and answercount higher than 10"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all posts tags 'awk' and  answercount > 10"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts with answercount > 10 and tags like 'awk'"
            }
        ], 
        "sql": "SELECT * FROM POSTS WHERE TAGS = 'awk' and answercount > 10;", 
        "sql_plain": "SELECT * FROM POSTS WHERE TAGS = 'awk' and answercount > 10;", 
        "id": "621098"
    }, 
    {
        "description": "", 
        "title": "HowDoIGetStartedProgramming", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/299151/388057/howdoigetstartedprogramming", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id as 'Post Link' and score form posts with 'get_started' in the title and with parentid not being null"
            }
        ], 
        "sql": "select Id as [Post Link], Body, Score from Posts where Title like '%get started%' and ParentId is null", 
        "sql_plain": "select Id as [Post Link], Body, Score from Posts where Title like '%get started%' and ParentId is null", 
        "id": "299151"
    }, 
    {
        "description": "", 
        "title": "Reach", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/301445/390832/reach", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the sum of viewcount of posts for posts with posttypeid = 1 and owneruserid = '22656' and parentid = id of the post"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "calculate the sum of all viewcounts of posts that have PostTypeId 1 and OwnerUserId = 22656"
            }
        ], 
        "sql": "SELECT SUM(Parent.ViewCount) FROM POSTS as Parent, POSTS as P WHERE P.PostTypeId=1 AND P.OwnerUserId = '22656' AND P.ParentId = Parent.Id", 
        "sql_plain": "SELECT SUM(Parent.ViewCount)\nFROM POSTS as Parent, POSTS as P\nWHERE P.PostTypeId=1\n      AND P.OwnerUserId = '22656'\n      AND P.ParentId = Parent.Id", 
        "id": "301445"
    }, 
    {
        "description": "", 
        "title": "num_comments_per_user", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/383004/492629/num-comments-per-user", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of comments each user has made"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the number of comments per user"
            }
        ], 
        "sql": "create table #comments_per_user (UserId int, NumComments int) insert #comments_per_user select top 20 Users.Id, count(*) from Users inner join Comments on Comments.UserId = Users.Id where Users.LastAccessDate >= '2013-01-01' group by Users.Id create table #posts_per_user (UserId int, NumPosts int) insert #posts_per_user select top 20 Users.Id, count(*) from Users inner join Posts on Posts.OwnerUserId = Users.Id where Users.LastAccessDate >= '2013-01-01' group by Users.Id", 
        "sql_plain": "create table #comments_per_user (UserId int, NumComments int)\ninsert #comments_per_user\nselect top 20\nUsers.Id, count(*)\nfrom Users\n  inner join Comments on Comments.UserId = Users.Id\nwhere Users.LastAccessDate >= '2013-01-01' \ngroup by Users.Id\n\ncreate table #posts_per_user (UserId int, NumPosts int)\ninsert #posts_per_user\nselect top 20\nUsers.Id, count(*)\nfrom Users\n  inner join Posts on Posts.OwnerUserId = Users.Id\nwhere Users.LastAccessDate >= '2013-01-01' \ngroup by Users.Id", 
        "id": "383004"
    }, 
    {
        "description": "", 
        "title": "Community", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/357665/461405/community", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the creation date of users with id = -1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the creationdate of the user with id -1"
            }
        ], 
        "sql": "SELECT CreationDate FROM Users WHERE Id = -1", 
        "sql_plain": "SELECT CreationDate FROM Users WHERE Id = -1", 
        "id": "357665"
    }, 
    {
        "description": "", 
        "title": "Sportsmanship", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/303904/393903/sportsmanship", 
        "comments": [
            "1 Question", 
            "2 Answer"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 100 posts that have posttypeid =2 and owneruserid = 1980228 and score  > 0"
            }
        ], 
        "sql": "select top 100 * from posts p where 1=1 and p.posttypeid=2 and p.owneruserid=1980228 and p.score>0", 
        "sql_plain": "-- 1 Question\n-- 2 Answer\n\nselect top 100 \n  * \nfrom posts p\nwhere 1=1\n  and p.posttypeid=2\n  and p.owneruserid=1980228\n  and p.score>0", 
        "id": "303904"
    }, 
    {
        "description": "", 
        "title": "Kconfig", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/354508/457565/kconfig", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts that have 'config' in the post tag"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts with tags like 'config'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "display those posts that have 'config' in their tags"
            }
        ], 
        "sql": "select * from Posts where Posts.Tags like '%config%';", 
        "sql_plain": "select * from Posts where Posts.Tags like '%config%';", 
        "id": "354508"
    }, 
    {
        "description": "", 
        "title": "work", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/597048/747682/work", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all posts with tags = '<sql>' and AcceptedAnswerID = NULL and POstTypeID =1 and CreationDate between between '2013-01-01' and  '2013-12-31'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all posts that have tags like '<sql>', AcceptedAnswerId is NULL, PostTypeId is 1 and their CreationDate is between '2013-01-01' and  '2013-12-31'"
            }
        ], 
        "sql": "select * from Posts where Posts.Tags like '<sql>' and Posts.AcceptedAnswerId is NULL and Posts.PostTypeId = 1 and Posts.CreationDate between '2013-01-01' and '2013-12-31'", 
        "sql_plain": "select *\nfrom \nPosts where Posts.Tags like '<sql>'\nand Posts.AcceptedAnswerId is NULL\nand Posts.PostTypeId = 1\nand Posts.CreationDate between '2013-01-01' and  '2013-12-31'", 
        "id": "597048"
    }, 
    {
        "description": "", 
        "title": "Length", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/322398/416937/length", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all the users ordered by descending length of their displayed name"
            }
        ], 
        "sql": "SELECT * FROM Users ORDER BY LEN(DisplayName) DESC", 
        "sql_plain": "SELECT *\nFROM Users\nORDER BY LEN(DisplayName) DESC", 
        "id": "322398"
    }, 
    {
        "description": "", 
        "title": "o", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/610895/763473/o", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get DisplayName, title of Users and Posts with OwnerUserID of post = Id of users and ViewCout of posts = max viewcount of posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show displayname and title of user with the most viewcount"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "displaname and title of the posts with the most views"
            }
        ], 
        "sql": "SELECT Users.DisplayName, Posts.Title FROM Users, Posts WHERE Posts.OwnerUserId = Users.Id AND Posts.ViewCount = (SELECT MAX(ViewCount) FROM Posts)", 
        "sql_plain": "SELECT Users.DisplayName, Posts.Title FROM Users, Posts WHERE Posts.OwnerUserId = Users.Id AND Posts.ViewCount = (SELECT MAX(ViewCount) FROM Posts)", 
        "id": "610895"
    }, 
    {
        "description": "", 
        "title": "pp_unanswered", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/333500/430337/pp-unanswered", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id, body , title, creation date, closed date, last activity date, view count and tags of posts that have 'paypal' in the tags and no answers, ordered by descending id's"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id,body as content,title, CreationDate,ClosedDate,Score,LastActivityDate,ViewCount,tag for those posts that their tags are like 'paypal', have AnswerCount 0 and are ordered descending by id"
            }
        ], 
        "sql": "select id,body as content,title, CreationDate,ClosedDate,Score,LastActivityDate,ViewCount as no_of_views,tags from posts where tags like '%paypal%' and AnswerCount = 0 order by id desc", 
        "sql_plain": "select id,body as content,title, CreationDate,ClosedDate,Score,LastActivityDate,ViewCount as no_of_views,tags \n from posts where tags like '%paypal%' and AnswerCount = 0 order by id desc", 
        "id": "333500"
    }, 
    {
        "description": "", 
        "title": "hah", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/385520/495442/hah", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all comments"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "all comments"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all comments"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all comments"
            }
        ], 
        "sql": "select * from comments;", 
        "sql_plain": "select *\nfrom comments;", 
        "id": "385520"
    }, 
    {
        "description": "", 
        "title": "Robotics", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/357976/461782/robotics", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id, score and body of posts with more views than 10"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the id, score and body of all posts that have been viewed more than 10 times"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id score body from posts with viewcount > 10"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, score, body of posts that have viewcount over 10"
            }
        ], 
        "sql": "Select Id, Score, Body from Posts where ViewCount > 10", 
        "sql_plain": "Select Id, Score, Body from Posts where ViewCount > 10", 
        "id": "357976"
    }, 
    {
        "description": "", 
        "title": "tet", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/331028/427490/tet", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id, display name, location, account id and website url of users that have 'switzer' in the location"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, displayname, location, accountid, WebsiteUrl for all users that live somewhere that have 'switzer' in their name"
            }
        ], 
        "sql": "Select Id, DisplayName, location, AccountID, WebsiteUrl from Users where location in ( Select distinct(location) from Users where location like '%switzer%')", 
        "sql_plain": "Select Id, DisplayName, location, AccountID, WebsiteUrl\nfrom Users\nwhere location in (\nSelect distinct(location)\nfrom Users\nwhere location like '%switzer%')", 
        "id": "331028"
    }, 
    {
        "description": "", 
        "title": "1000", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/384171/493926/1000", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List users with posts that have a total score over 1000"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get users with posts score higher that 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show owneruserid and the sum of its scores that are > 1000"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "owneruserid and the sum of his scores that are over 1000"
            }
        ], 
        "sql": "select OwnerUserId,sum(score) from posts where score > 1000 group by OwnerUserId;", 
        "sql_plain": "select OwnerUserId,sum(score) from posts where score > 1000 group by OwnerUserId;", 
        "id": "384171"
    }, 
    {
        "description": "", 
        "title": "TagInfo", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/291354/378482/taginfo", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all tags that have 'sql' in the tag ordered by tagname descending"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all from tags with tagname like 'sql' sorted by tagname descending"
            }
        ], 
        "sql": "SELECT * FROM Tags where tagname like '%sql%' order by tagname desc", 
        "sql_plain": "SELECT *\nFROM Tags \nwhere tagname like '%sql%'\norder by tagname desc", 
        "id": "291354"
    }, 
    {
        "description": "", 
        "title": "votes", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/570947/718906/votes", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "get id, postid, votetypeidd, userid, creationdate and bountyamount for all votes that have teir postid in between 21984272 and 21948145 and are sorbet by userid, creationdate, votetypeid"
            }
        ], 
        "sql": "select id, postid, votetypeid, userid, creationdate, bountyamount from votes where postid in (21984272,21948145) order by userid, creationdate, votetypeid;", 
        "sql_plain": "select id, postid, votetypeid, userid, creationdate, bountyamount\nfrom votes \nwhere postid in (21984272,21948145)\norder by userid, creationdate, votetypeid;", 
        "id": "570947"
    }, 
    {
        "description": "", 
        "title": "learning!", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/362492/467264/learning", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id,body and the score of posts that have 'stakeholder' in the tag"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, body, score of posts with tags like 'stakeholder'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select id, body and score of posts that has 'stakeholder' in tags"
            }
        ], 
        "sql": "select Id as [Post Link], Body, Score from Posts where Tags Like '%stakeholder%'", 
        "sql_plain": "select Id as [Post Link], Body, Score from Posts\nwhere Tags Like '%stakeholder%'", 
        "id": "362492"
    }, 
    {
        "description": "", 
        "title": "SQLprac", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/313552/406025/sqlprac", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the score, creation date, tags of posts that have score > 10 or the tag like 'linux'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show score, creationdate and tags for tags which have either score greather than 10 or have 'linux' as tag"
            }
        ], 
        "sql": "SELECT Score,CreationDate,Tags FROM Posts WHERE Score > 10 OR Tags LIKE 'linux'", 
        "sql_plain": "SELECT Score,CreationDate,Tags FROM Posts \nWHERE Score > 10\n   OR Tags LIKE 'linux'", 
        "id": "313552"
    }, 
    {
        "description": "", 
        "title": "ReputationOver10k", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/324957/420097/reputationover10k", 
        "comments": [
            "Reputation greater than 100000", 
            "Get ID, Rep, and DisplayName of users with rep greater than 100000m order by rep"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the id, reputation and displayed name of users thatbhave reputation > 10000 ordered by reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, reputation and displayname for those user with a reputation greater than 10000, ordered by reputation"
            }
        ], 
        "sql": "SELECT Id, Reputation, DisplayName FROM Users WHERE Reputation > 10000 ORDER BY Reputation;", 
        "sql_plain": "-- Reputation greater than 100000\n-- Get ID, Rep, and DisplayName  of users with rep greater than 100000m order by rep\n\nSELECT Id, Reputation, DisplayName FROM Users WHERE Reputation > 10000 \nORDER BY Reputation;", 
        "id": "324957"
    }, 
    {
        "description": "", 
        "title": "Downvoted", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/629461/786089/downvoted", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 25 posts id, owner id and score which have the post type = 2 and score less than 0, oredered by score"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select top 25 posts id, owneruserid and score where score < 40 and posttyped = 2 order by score"
            }
        ], 
        "sql": "SELECT TOP 25 Posts.Id AS [Post Link], Posts.OwnerUserId as [User Link], Score FROM Posts WHERE Score <0 AND PostTypeId = 2 ORDER BY Score ASC", 
        "sql_plain": "SELECT TOP 25 Posts.Id AS [Post Link], Posts.OwnerUserId as [User Link], Score\nFROM Posts\nWHERE Score <0 AND PostTypeId = 2\nORDER BY Score ASC", 
        "id": "629461"
    }, 
    {
        "description": "", 
        "title": "angularjs", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/635380/794230/angularjs", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "list the tag name from tags for tags 'angularjs' or 'reactjs'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select tagname, count from tags where tagname = 'angularjs' or tagname = 'reactjs'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show tagname, count where tag like angularjs or reactjs"
            }
        ], 
        "sql": "select TagName, Count from Tags where TagName = 'angularjs' OR TagName = 'reactjs'", 
        "sql_plain": "select TagName, Count from Tags where TagName = 'angularjs' OR TagName = 'reactjs'", 
        "id": "635380"
    }, 
    {
        "description": "", 
        "title": "Voters", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/300674/389769/voters", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 100 id, displayname, upvotes+downvotes as 'Votes', upvotes,downvotes of users ordered by descending votes"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, displayname, total of uptoves and downvotes, upvotes, downvotes of users, sorted by votes dedscending"
            }
        ], 
        "sql": "select top 100 Id, DisplayName, UpVotes+DownVotes as Votes, UpVotes, DownVotes from Users order by Votes desc;", 
        "sql_plain": "select top 100 Id, DisplayName, UpVotes+DownVotes as Votes, UpVotes, DownVotes from Users order by Votes desc;", 
        "id": "300674"
    }, 
    {
        "description": "", 
        "title": "Deleted", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/381938/491219/deleted", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 10 deleted posts from user with id 130164"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 10 deleted posts of user 130164"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select top 1 posts of owneruserid = 130163 that were deleted"
            }
        ], 
        "sql": "SELECT TOP 10 * FROM PostsWithDeleted WHERE DeletionDate IS NOT NULL AND OwnerUserId=130164", 
        "sql_plain": "SELECT TOP 10\n* FROM PostsWithDeleted WHERE DeletionDate IS NOT NULL\nAND OwnerUserId=130164", 
        "id": "381938"
    }, 
    {
        "description": "Identifier les communaut\u00e9s d'int\u00e9r\u00eat", 
        "title": "[No_Name]Bob1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/616613/770600/no-namebob1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 20 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 20 posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the top 20 posts"
            }
        ], 
        "sql": "select top 20 * from posts;", 
        "sql_plain": "select top 20 * from posts;", 
        "id": "616613"
    }, 
    {
        "description": "", 
        "title": "TestQuery", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/624360/779830/testquery", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get displayName,reputation of users that have reputation = maximum reputation of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "user with the highest reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "user highest reputation"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "whick user has the highest reputation"
            }
        ], 
        "sql": "SELECT DisplayName, Reputation FROM Users WHERE Reputation = ( SELECT Max(Reputation) from Users );", 
        "sql_plain": "SELECT DisplayName, Reputation FROM Users WHERE Reputation = \n( \nSELECT Max(Reputation) from Users\n);", 
        "id": "624360"
    }, 
    {
        "description": "", 
        "title": "predix", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/629560/786214/predix", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts that have 'predix' in the title or the tags"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get all posts with the title or tags containing 'predix'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select all posts with tags like predix or title like predix"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "posts with tags ot title like predix"
            }
        ], 
        "sql": "SELECT * FROM Posts where lower(tags) like '%predix%' or lower(title) like '%predix%'", 
        "sql_plain": "SELECT * FROM Posts where \nlower(tags) like '%predix%' or\nlower(title) like '%predix%'", 
        "id": "629560"
    }, 
    {
        "description": "", 
        "title": "myquery", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/634905/793512/myquery", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List id, reputation, displayed name and location for users located in Pakistan or pakistan ordered by descending reputation"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get id, reputation, displayed name and location of users that have the location containing 'Pakistan' or 'pakistan'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select id, reputation, displayname, locationfrom userswhere location like 'Pakistan' or location like 'pakistan' order by reputation desc"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the idd, reputation, display name and location of all users that live in pakistan oedered by reputation"
            }
        ], 
        "sql": "select Id, Reputation, DisplayName, Location from Users where Location like '%Pakistan%' OR Location like '%pakistan%' order by Reputation desc", 
        "sql_plain": "select Id, Reputation, DisplayName, Location\nfrom Users\nwhere Location like '%Pakistan%' OR Location like '%pakistan%' \norder by Reputation desc", 
        "id": "634905"
    }, 
    {
        "description": "", 
        "title": "duplicate?", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/323274/417958/duplicate", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all the posts that have the id = 4971636"
            }
        ], 
        "sql": "SELECT * FROM Posts WHERE Id = 4971636;", 
        "sql_plain": "SELECT * FROM Posts WHERE Id = 4971636;", 
        "id": "323274"
    }, 
    {
        "description": "", 
        "title": "Semarchy", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/615788/769608/semarchy", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the total number of posts with title containing 'semarchy'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many posts have 'semarchy' in title"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "number of posts with 'semarchy' in tile"
            }
        ], 
        "sql": "select count(*) from posts where title like '%semarchy%'", 
        "sql_plain": "select count(*) from posts where title like '%semarchy%'", 
        "id": "615788"
    }, 
    {
        "description": "", 
        "title": "testbigdata", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/392758/503603/testbigdata", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posts with 'bigdata' tag"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select id, title and tags where tags contains bigdata"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show id, title, tags with tags has 'bigdata'"
            }
        ], 
        "sql": "Select Posts.Id, Posts.Title, Posts.Tags from Posts where Posts.Tags like '%bigdata%';", 
        "sql_plain": "Select Posts.Id, Posts.Title, Posts.Tags from Posts where Posts.Tags like '%bigdata%';", 
        "id": "392758"
    }, 
    {
        "description": "", 
        "title": "ren", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/627207/783306/ren", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id, tag name and count of all tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select id, name and number of all tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id, name and count of all tags"
            }
        ], 
        "sql": "SELECT Id, TagName, Count FROM Tags", 
        "sql_plain": "SELECT Id, TagName, Count FROM Tags", 
        "id": "627207"
    }, 
    {
        "description": "", 
        "title": "Query1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/625179/780871/query1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the id, reputation and location of all users that have more views than 500"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select id, reputation, location where views >= 500"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id reputation location of users where views >= 500"
            }
        ], 
        "sql": "select Id, Reputation, Location from Users where Views > 500", 
        "sql_plain": "select Id, Reputation, Location from Users where Views > 500", 
        "id": "625179"
    }, 
    {
        "description": "", 
        "title": "ForFindingBestAnswers", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/387572/497770/forfindingbestanswers", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List top 10 users by reputation"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the highest reputation users"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the top 10 users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select top 10 users order by reputation desc"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 10 users with the most reputation"
            }
        ], 
        "sql": "select top(10) * from users order by reputation desc", 
        "sql_plain": "select  top(10) * from users order by reputation desc", 
        "id": "387572"
    }, 
    {
        "description": "", 
        "title": "PostHistory", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/313146/405427/posthistory", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List all posthistory for posthistorytype = 4 or posthistorytype = 5 and postid = 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show everything from posthistory that have postid 1 and PostHistoryTypeId either 4 or 5"
            }
        ], 
        "sql": "SELECT * FROM PostHistory ph WHERE (ph.PostHistoryTypeId = 4 OR ph.PostHistoryTypeId = 5) AND ph.PostId = 1", 
        "sql_plain": "SELECT *\nFROM PostHistory ph\nWHERE (ph.PostHistoryTypeId = 4 OR ph.PostHistoryTypeId = 5)\nAND ph.PostId = 1", 
        "id": "313146"
    }, 
    {
        "description": "", 
        "title": "icodetlrn", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/586761/736116/icodetlrn", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 2, 
                "annotation": "show distinct ids, location, reputation, displayname, websiteurl, aboutme, viewsfor all users from 'ndia' and their websiteurl is like 'linkedin'"
            }
        ], 
        "sql": "select distinct u.Id , u.Location, Reputation, DisplayName, WebsiteUrl, AboutMe, Views from Users u inner join Comments c on c.UserId = u.Id where u.Location like '%ndia%' and u.WebsiteUrl like '%linkedin%'", 
        "sql_plain": "select  distinct u.Id , u.Location, Reputation, DisplayName, WebsiteUrl, AboutMe, Views from Users u inner join Comments c on c.UserId = u.Id where u.Location like '%ndia%' and u.WebsiteUrl like '%linkedin%'", 
        "id": "586761"
    }, 
    {
        "description": "", 
        "title": "TagSysnonyms", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/332347/428962/tagsysnonyms", 
        "comments": [
            "Enter Query Title", 
            "Enter Query Description"
        ], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all post tags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get all from posttags"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show everythind about posttags"
            }
        ], 
        "sql": "select * from PostTags", 
        "sql_plain": "-- Enter Query Title\n-- Enter Query Description\n\nselect * from PostTags", 
        "id": "332347"
    }, 
    {
        "description": "", 
        "title": "prvy", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/288764/375383/prvy", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the commentcount, ClosedDate of posts with the closeddate > 2013-01-01"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for post closed after 2013-01-01 show CommentCount, and ClosedDate"
            }
        ], 
        "sql": "SELECT CommentCount, ClosedDate FROM Posts WHERE ClosedDate > 2013-01-01", 
        "sql_plain": "SELECT CommentCount, ClosedDate FROM Posts\n  WHERE ClosedDate > 2013-01-01", 
        "id": "288764"
    }, 
    {
        "description": "", 
        "title": "Consulta", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/290664/377531/consulta", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the id and displayname of users"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show both idd and displayname from users"
            }
        ], 
        "sql": "select Id, DisplayName from Users", 
        "sql_plain": "select Id, DisplayName from Users", 
        "id": "290664"
    }, 
    {
        "description": "", 
        "title": "Swift", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/371908/479261/swift", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get post details for top 150 posts with the tag '<swift>'"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List the top 250 posts ordered by id that have the tag '<swift>'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "top 250 posts, with title != null, and tags = '<swift>' but only id, posttypeid, title, tags, score, answercount, favoritecount"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "id, posttypeid, title, tags, score answercount, favoritecount of all posts that doesn;t have title null and have tags = '<swift>'"
            }
        ], 
        "sql": "select top 250 Id, PostTypeId, Title, Tags, Score, AnswerCount, FavoriteCount from Posts as [Post Link] where Title is not null and Tags = '<swift>'", 
        "sql_plain": "select top 250 Id, PostTypeId, Title, Tags, Score, AnswerCount, FavoriteCount from Posts as [Post Link]\nwhere Title is not null\nand Tags = '<swift>'", 
        "id": "371908"
    }, 
    {
        "description": "", 
        "title": "myq", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/377587/486272/myq", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List comments by highest score for user with id 241153"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show score, text, postid where userid = 241153 ordered desc by score but asc by text"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "score, text and postid of comments of user 241153, oreder score desc, text asc"
            }
        ], 
        "sql": "SELECT Score, Text, PostId AS [Post Link] FROM Comments WHERE UserId = 241153 ORDER BY Score DESC, Text ASC;", 
        "sql_plain": "SELECT Score, Text, PostId AS [Post Link]\nFROM Comments\nWHERE UserId = 241153\nORDER BY Score DESC, Text ASC;", 
        "id": "377587"
    }, 
    {
        "description": "", 
        "title": "byviewcount", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/638162/797486/byviewcount", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the number of posts and the view count of each post if the view count is greater than 1"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get the number of all posts and the view count that were viewed more than 1 time"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "select how many posts and view count from posts grouped by view count having count greater than 1"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show count of views of every post"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "how many views have every post"
            }
        ], 
        "sql": "select count(*) ,posts.ViewCount from posts group by posts.ViewCount having count(*)>1", 
        "sql_plain": "select count(*) ,posts.ViewCount from posts group by \nposts.ViewCount having count(*)>1", 
        "id": "638162"
    }, 
    {
        "description": "", 
        "title": "tags_views", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/383100/492724/tags-views", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the most viewed 20 tags"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List top 20 tags by view count"
            }
        ], 
        "sql": "Select top 20 ViewCount, Tags, Tags.Id, Tags.TagName from Posts INNER JOIN PostTags ON PostTags.PostId = Posts.ParentId INNER JOIN Tags ON Tags.Id = PostTags.PostId Where ViewCount > 0", 
        "sql_plain": "Select top 20\nViewCount, Tags, Tags.Id, Tags.TagName\nfrom Posts\n    INNER JOIN PostTags ON PostTags.PostId = Posts.ParentId\n    INNER JOIN Tags ON Tags.Id = PostTags.PostId\nWhere ViewCount > 0", 
        "id": "383100"
    }, 
    {
        "description": "", 
        "title": "1repAnswers", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/338774/437150/1repanswers", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List the top 30 posts that have the owner user id in the top 100 id's of users that have reputation equal to 1, and post type id equal to 2, ordered by descending creation date"
            }
        ], 
        "sql": "Select TOP 30 * FROM posts WHERE OwnerUserId IN ( SELECT TOP 100 ID from users WHERE Reputation = 1 ) AND PostTypeId = 2 ORDER BY CreationDate DESC", 
        "sql_plain": "Select\n  TOP 30 *\nFROM\n  posts\nWHERE\n  OwnerUserId IN (\n    SELECT TOP 100 ID from users WHERE Reputation = 1\n  )\nAND\n  PostTypeId = 2\nORDER BY\n  CreationDate DESC", 
        "id": "338774"
    }, 
    {
        "description": "", 
        "title": "2CS.AutoHint.Ticket", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/608659/760620/2cs-autohint-ticket", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List topp 1000 CreationDate, Body, Title, ClosedDate of posts for posts with not null Title ordered by descending CreationDate"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show top 1000 posts but only creationdate, body, title and closed date thata doesn't have title null ordered descending by creationdate"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "creationdadte, body, title, closeddate for top 1000 posts that have title != null"
            }
        ], 
        "sql": "select top 1000 p.CreationDate, p.Body, p.Title, p.ClosedDate from Posts p where p.Title is not null order by p.CreationDate desc", 
        "sql_plain": "select top 1000 p.CreationDate, p.Body, p.Title, p.ClosedDate\nfrom Posts p\nwhere p.Title is not null\norder by p.CreationDate desc", 
        "id": "608659"
    }, 
    {
        "description": "", 
        "title": "related", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/566186/713747/related", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get RelatedPostID of posts that have the postId the same as id of popstLinks and postId of posts = 53734"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get relatedpostid for all posts that have postid 53734"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "for all posts with postid 53734 display RelatedPostId"
            }
        ], 
        "sql": "select pl.RelatedPostId FROM Posts p INNER JOIN PostLinks pl ON p.Id = pl.postId WHERE postId = 53734", 
        "sql_plain": "select pl.RelatedPostId FROM\n    Posts p\n  INNER JOIN\n    PostLinks pl ON p.Id = pl.postId\nWHERE postId = 53734", 
        "id": "566186"
    }, 
    {
        "description": "", 
        "title": "scores", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/293566/381230/scores", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get displayName of users tha have displayname = 'A'"
            }
        ], 
        "sql": "select DisplayName from users where DisplayName like 'A'", 
        "sql_plain": "select DisplayName from users where DisplayName like 'A'", 
        "id": "293566"
    }, 
    {
        "description": "", 
        "title": "none", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/375801/484130/none", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the body from posts of user with id 2097152"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List the body for all posts of user 2097152"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show the body of posts that have id 2097152"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "body of posts of user 2097152"
            }
        ], 
        "sql": "select Body from Posts where id='2097152';", 
        "sql_plain": "select Body from Posts where id='2097152';", 
        "id": "375801"
    }, 
    {
        "description": "", 
        "title": "EasyQry", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/386197/496179/easyqry", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "List number of posts of each user"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "Get how many posts each user made"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show user id and number of its posts grouped by id"
            }
        ], 
        "sql": "select u.Id as UserID, count(*) as Posts from Users u left join Posts p on u.Id = p.OwnerUserId group by u.Id", 
        "sql_plain": "select u.Id as UserID, count(*) as Posts\nfrom Users u left join Posts p on u.Id = p.OwnerUserId\ngroup by u.Id", 
        "id": "386197"
    }, 
    {
        "description": "", 
        "title": "EDITS", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/351516/453665/edits", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get the top 10 post id's, creation date , owner user id and the comment of suggested edits"
            }
        ], 
        "sql": "select top 10 postid, creationdate, owneruserid, comment from suggestededits;", 
        "sql_plain": "select top 10  postid, creationdate, owneruserid, comment from suggestededits;", 
        "id": "351516"
    }, 
    {
        "description": "", 
        "title": "pk", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/360270/464628/pk", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get all tags with the name 'coldfusion'"
            }, 
            {
                "annotator_id": 1, 
                "annotation": "List all tags named 'coldfusion'"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "show all tags that have its tagname 'coldfusion'"
            }
        ], 
        "sql": "select * from tags where tagname = 'coldfusion'", 
        "sql_plain": "select * from tags where tagname = 'coldfusion'", 
        "id": "360270"
    }, 
    {
        "description": "", 
        "title": "B1", 
        "url": "http://data.stackexchange.com/stackoverflow/revision/617640/771866/b1", 
        "comments": [], 
        "annotations": [
            {
                "annotator_id": 1, 
                "annotation": "Get Title, Tags of posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "get title and tags for all posts"
            }, 
            {
                "annotator_id": 2, 
                "annotation": "title and dtags for posts"
            }
        ], 
        "sql": "select Title, Tags from Posts;", 
        "sql_plain": "select Title, Tags from Posts;", 
        "id": "617640"
    }
]